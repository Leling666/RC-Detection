[{"cfgs":[1],"code":"public void executeSql(final Connection connection, final String sql, final boolean isAutoCommit) throws SQLException","dfgs":[1,2,3,4,5],"fName":"src_main_java_com_zaxxer_hikari_pool_PoolUtilities.java","fieldParents":[],"isDel":true,"lineBeg":84,"lineEnd":85,"lineMapIndex":31,"methodParents":[],"nodeIndex":0},{"cfgs":[2],"code":"if (sql != null)","dfgs":[3],"fName":"src_main_java_com_zaxxer_hikari_pool_PoolUtilities.java","fieldParents":[],"isDel":true,"lineBeg":86,"lineEnd":86,"lineMapIndex":32,"methodParents":[],"nodeIndex":1},{"cfgs":[3],"code":"try (Statement statement = connection.createStatement()) ","dfgs":[3,5],"fName":"src_main_java_com_zaxxer_hikari_pool_PoolUtilities.java","fieldParents":[],"isDel":true,"lineBeg":87,"lineEnd":87,"lineMapIndex":33,"methodParents":[],"nodeIndex":2},{"cfgs":[4],"code":"statement.execute(sql)","dfgs":[],"fName":"src_main_java_com_zaxxer_hikari_pool_PoolUtilities.java","fieldParents":[],"isDel":true,"lineBeg":88,"lineEnd":88,"lineMapIndex":34,"methodParents":[],"nodeIndex":3},{"cfgs":[5],"code":"if (!isAutoCommit)","dfgs":[],"fName":"src_main_java_com_zaxxer_hikari_pool_PoolUtilities.java","fieldParents":[],"isDel":true,"lineBeg":89,"lineEnd":89,"lineMapIndex":35,"methodParents":[],"nodeIndex":4},{"cfgs":[],"code":"connection.commit()","dfgs":[],"fName":"src_main_java_com_zaxxer_hikari_pool_PoolUtilities.java","fieldParents":[],"isDel":true,"lineBeg":90,"lineEnd":90,"lineMapIndex":36,"methodParents":[],"nodeIndex":5},{"cfgs":[],"code":"public void setupConnection(final Connection connection, final boolean isAutoCommit, final boolean isReadOnly, final int transactionIsolation, final String catalog) throws SQLException","dfgs":[],"fName":"src_main_java_com_zaxxer_hikari_pool_PoolUtilities.java","fieldParents":[],"isDel":true,"lineBeg":137,"lineEnd":138,"lineMapIndex":29,"methodParents":[],"nodeIndex":6},{"cfgs":[],"code":"throw new RuntimeException(\"driverClassName specified class '\" + driverClassName + \"' could not be loaded\", e)","dfgs":[],"fName":"src_main_java_com_zaxxer_hikari_HikariConfig.java","fieldParents":[],"isDel":true,"lineBeg":320,"lineEnd":320,"lineMapIndex":37,"methodParents":[],"nodeIndex":7},{"cfgs":[9],"code":"logger.error(\"when specifying driverClassName, jdbcUrl must also be specified\")","dfgs":[],"fName":"src_main_java_com_zaxxer_hikari_HikariConfig.java","fieldParents":[],"isDel":true,"lineBeg":734,"lineEnd":734,"lineMapIndex":38,"methodParents":[],"nodeIndex":8},{"cfgs":[],"code":"throw new IllegalStateException(\"when specifying driverClassName, jdbcUrl must also be specified\")","dfgs":[],"fName":"src_main_java_com_zaxxer_hikari_HikariConfig.java","fieldParents":[],"isDel":true,"lineBeg":735,"lineEnd":735,"lineMapIndex":39,"methodParents":[],"nodeIndex":9},{"cfgs":[11],"code":"logger.error(\"both driverClassName and dataSourceClassName are specified, one or the other should be used\")","dfgs":[],"fName":"src_main_java_com_zaxxer_hikari_HikariConfig.java","fieldParents":[],"isDel":true,"lineBeg":738,"lineEnd":738,"lineMapIndex":40,"methodParents":[],"nodeIndex":10},{"cfgs":[],"code":"throw new IllegalStateException(\"both driverClassName and dataSourceClassName are specified, one or the other should be used\")","dfgs":[],"fName":"src_main_java_com_zaxxer_hikari_HikariConfig.java","fieldParents":[],"isDel":true,"lineBeg":739,"lineEnd":739,"lineMapIndex":41,"methodParents":[],"nodeIndex":11},{"cfgs":[13],"code":"logger.error(\"one of either dataSource, dataSourceClassName, or jdbcUrl and driverClassName must be specified\")","dfgs":[],"fName":"src_main_java_com_zaxxer_hikari_HikariConfig.java","fieldParents":[],"isDel":true,"lineBeg":745,"lineEnd":745,"lineMapIndex":42,"methodParents":[],"nodeIndex":12},{"cfgs":[],"code":"throw new IllegalArgumentException(\"one of either dataSource or dataSourceClassName must be specified\")","dfgs":[],"fName":"src_main_java_com_zaxxer_hikari_HikariConfig.java","fieldParents":[],"isDel":true,"lineBeg":746,"lineEnd":746,"lineMapIndex":43,"methodParents":[],"nodeIndex":13},{"cfgs":[],"code":"logger.warn(\"both dataSource and dataSourceClassName are specified, ignoring dataSourceClassName\")","dfgs":[],"fName":"src_main_java_com_zaxxer_hikari_HikariConfig.java","fieldParents":[],"isDel":true,"lineBeg":749,"lineEnd":749,"lineMapIndex":44,"methodParents":[],"nodeIndex":14},{"cfgs":[17,16],"code":"logger.warn(\"validationTimeout is greater than connectionTimeout, setting validationTimeout to connectionTimeout.\")","dfgs":[17,16],"fName":"src_main_java_com_zaxxer_hikari_HikariConfig.java","fieldParents":[],"isDel":true,"lineBeg":766,"lineEnd":766,"lineMapIndex":45,"methodParents":[],"nodeIndex":15},{"cfgs":[17],"code":"logger.warn(\"maxLifetime is less than 30000ms, using default {}ms.\", MAX_LIFETIME)","dfgs":[17],"fName":"src_main_java_com_zaxxer_hikari_HikariConfig.java","fieldParents":[],"isDel":true,"lineBeg":779,"lineEnd":779,"lineMapIndex":46,"methodParents":[],"nodeIndex":16},{"cfgs":[],"code":"logger.warn(\"idleTimeout is less than 10000ms, using default {}ms.\", IDLE_TIMEOUT)","dfgs":[],"fName":"src_main_java_com_zaxxer_hikari_HikariConfig.java","fieldParents":[],"isDel":true,"lineBeg":784,"lineEnd":784,"lineMapIndex":47,"methodParents":[],"nodeIndex":17},{"cfgs":[],"code":"Assert.assertTrue(ise.getMessage().contains(\"driverClassName specified class\"))","dfgs":[],"fName":"src_test_java_com_zaxxer_hikari_TestValidation.java","fieldParents":[],"isDel":true,"lineBeg":77,"lineEnd":77,"lineMapIndex":48,"methodParents":[],"nodeIndex":18},{"cfgs":[],"code":"Assert.assertTrue(ise.getMessage().contains(\"one of either dataSource\"))","dfgs":[],"fName":"src_test_java_com_zaxxer_hikari_TestValidation.java","fieldParents":[],"isDel":true,"lineBeg":90,"lineEnd":90,"lineMapIndex":49,"methodParents":[],"nodeIndex":19},{"cfgs":[],"code":"Assert.assertTrue(ise.getMessage().contains(\"both driverClassName\"))","dfgs":[],"fName":"src_test_java_com_zaxxer_hikari_TestValidation.java","fieldParents":[],"isDel":true,"lineBeg":187,"lineEnd":187,"lineMapIndex":50,"methodParents":[],"nodeIndex":20},{"cfgs":[22],"code":"Assert.assertTrue(new String(baos.toByteArray()).contains(\"both dataSource\"))","dfgs":[22],"fName":"src_test_java_com_zaxxer_hikari_TestValidation.java","fieldParents":[],"isDel":true,"lineBeg":204,"lineEnd":204,"lineMapIndex":51,"methodParents":[],"nodeIndex":21},{"cfgs":[],"code":"Assert.assertTrue(ise.getMessage().contains(\"both dataSource\"))","dfgs":[],"fName":"src_test_java_com_zaxxer_hikari_TestValidation.java","fieldParents":[],"isDel":true,"lineBeg":207,"lineEnd":207,"lineMapIndex":52,"methodParents":[],"nodeIndex":22},{"cfgs":[24],"code":"LOGGER.info(\"HikariCP pool {} is shutting down.\", configuration.getPoolName())","dfgs":[24],"fName":"src_main_java_com_zaxxer_hikari_pool_HikariPool.java","fieldParents":[],"isDel":true,"lineBeg":253,"lineEnd":253,"lineMapIndex":53,"methodParents":[],"nodeIndex":23},{"cfgs":[],"code":"final ExecutorService assassinExecutor = createThreadPoolExecutor(configuration.getMaximumPoolSize(), \"HikariCP connection assassin\",configuration.getThreadFactory(), new ThreadPoolExecutor.CallerRunsPolicy())","dfgs":[],"fName":"src_main_java_com_zaxxer_hikari_pool_HikariPool.java","fieldParents":[],"isDel":true,"lineBeg":263,"lineEnd":264,"lineMapIndex":54,"methodParents":[],"nodeIndex":24},{"cfgs":[26],"code":"poolUtils.setupConnection(connection, isAutoCommit, isReadOnly, transactionIsolation, catalog)","dfgs":[26],"fName":"src_main_java_com_zaxxer_hikari_pool_HikariPool.java","fieldParents":[],"isDel":true,"lineBeg":512,"lineEnd":512,"lineMapIndex":55,"methodParents":[6],"nodeIndex":25},{"cfgs":[],"code":"poolUtils.executeSql(connection, configuration.getConnectionInitSql(), isAutoCommit)","dfgs":[],"fName":"src_main_java_com_zaxxer_hikari_pool_HikariPool.java","fieldParents":[],"isDel":true,"lineBeg":513,"lineEnd":513,"lineMapIndex":-1,"methodParents":[0],"nodeIndex":26},{"cfgs":[],"code":"LOGGER.info(\"HikariCP pool {} is starting.\", configuration.getPoolName())","dfgs":[],"fName":"src_main_java_com_zaxxer_hikari_HikariDataSource.java","fieldParents":[],"isDel":true,"lineBeg":72,"lineEnd":72,"lineMapIndex":56,"methodParents":[],"nodeIndex":27},{"cfgs":[],"code":"LOGGER.info(\"HikariCP pool {} is starting.\", getPoolName())","dfgs":[],"fName":"src_main_java_com_zaxxer_hikari_HikariDataSource.java","fieldParents":[],"isDel":true,"lineBeg":95,"lineEnd":95,"lineMapIndex":57,"methodParents":[],"nodeIndex":28},{"cfgs":[30],"code":"public void setupConnection(final Connection connection, final String initSql, final boolean isAutoCommit, final boolean isReadOnly, final int transactionIsolation, final String catalog) throws SQLException","dfgs":[30],"fName":"src_main_java_com_zaxxer_hikari_pool_PoolUtilities.java","fieldParents":[],"isDel":false,"lineBeg":118,"lineEnd":119,"lineMapIndex":6,"methodParents":[],"nodeIndex":29},{"cfgs":[],"code":"executeSql(connection, initSql, isAutoCommit)","dfgs":[],"fName":"src_main_java_com_zaxxer_hikari_pool_PoolUtilities.java","fieldParents":[],"isDel":false,"lineBeg":129,"lineEnd":129,"lineMapIndex":-1,"methodParents":[31],"nodeIndex":30},{"cfgs":[32],"code":"private void executeSql(final Connection connection, final String sql, final boolean isAutoCommit) throws SQLException","dfgs":[32,33,34,35,36],"fName":"src_main_java_com_zaxxer_hikari_pool_PoolUtilities.java","fieldParents":[],"isDel":false,"lineBeg":224,"lineEnd":225,"lineMapIndex":0,"methodParents":[],"nodeIndex":31},{"cfgs":[33],"code":"if (sql != null)","dfgs":[34],"fName":"src_main_java_com_zaxxer_hikari_pool_PoolUtilities.java","fieldParents":[],"isDel":false,"lineBeg":226,"lineEnd":226,"lineMapIndex":1,"methodParents":[],"nodeIndex":32},{"cfgs":[34],"code":"try (Statement statement = connection.createStatement()) ","dfgs":[34,36],"fName":"src_main_java_com_zaxxer_hikari_pool_PoolUtilities.java","fieldParents":[],"isDel":false,"lineBeg":227,"lineEnd":227,"lineMapIndex":2,"methodParents":[],"nodeIndex":33},{"cfgs":[35],"code":"statement.execute(sql)","dfgs":[],"fName":"src_main_java_com_zaxxer_hikari_pool_PoolUtilities.java","fieldParents":[],"isDel":false,"lineBeg":228,"lineEnd":228,"lineMapIndex":3,"methodParents":[],"nodeIndex":34},{"cfgs":[36],"code":"if (!isAutoCommit)","dfgs":[],"fName":"src_main_java_com_zaxxer_hikari_pool_PoolUtilities.java","fieldParents":[],"isDel":false,"lineBeg":229,"lineEnd":229,"lineMapIndex":4,"methodParents":[],"nodeIndex":35},{"cfgs":[],"code":"connection.commit()","dfgs":[],"fName":"src_main_java_com_zaxxer_hikari_pool_PoolUtilities.java","fieldParents":[],"isDel":false,"lineBeg":230,"lineEnd":230,"lineMapIndex":5,"methodParents":[],"nodeIndex":36},{"cfgs":[],"code":"throw new RuntimeException(\"Could not load class of driverClassName \" + driverClassName, e)","dfgs":[],"fName":"src_main_java_com_zaxxer_hikari_HikariConfig.java","fieldParents":[],"isDel":false,"lineBeg":320,"lineEnd":320,"lineMapIndex":7,"methodParents":[],"nodeIndex":37},{"cfgs":[39],"code":"logger.error(\"jdbcUrl is required with driverClassName\")","dfgs":[],"fName":"src_main_java_com_zaxxer_hikari_HikariConfig.java","fieldParents":[],"isDel":false,"lineBeg":734,"lineEnd":734,"lineMapIndex":8,"methodParents":[],"nodeIndex":38},{"cfgs":[],"code":"throw new IllegalStateException(\"jdbcUrl is required with driverClassName\")","dfgs":[],"fName":"src_main_java_com_zaxxer_hikari_HikariConfig.java","fieldParents":[],"isDel":false,"lineBeg":735,"lineEnd":735,"lineMapIndex":9,"methodParents":[],"nodeIndex":39},{"cfgs":[41],"code":"logger.error(\"cannot use driverClassName and dataSourceClassName together\")","dfgs":[],"fName":"src_main_java_com_zaxxer_hikari_HikariConfig.java","fieldParents":[],"isDel":false,"lineBeg":738,"lineEnd":738,"lineMapIndex":10,"methodParents":[],"nodeIndex":40},{"cfgs":[],"code":"throw new IllegalStateException(\"cannot use driverClassName and dataSourceClassName together\")","dfgs":[],"fName":"src_main_java_com_zaxxer_hikari_HikariConfig.java","fieldParents":[],"isDel":false,"lineBeg":739,"lineEnd":739,"lineMapIndex":11,"methodParents":[],"nodeIndex":41},{"cfgs":[43],"code":"logger.error(\"either dataSource or dataSourceClassName is required\")","dfgs":[],"fName":"src_main_java_com_zaxxer_hikari_HikariConfig.java","fieldParents":[],"isDel":false,"lineBeg":745,"lineEnd":745,"lineMapIndex":12,"methodParents":[],"nodeIndex":42},{"cfgs":[],"code":"throw new IllegalArgumentException(\"either dataSource or dataSourceClassName is required\")","dfgs":[],"fName":"src_main_java_com_zaxxer_hikari_HikariConfig.java","fieldParents":[],"isDel":false,"lineBeg":746,"lineEnd":746,"lineMapIndex":13,"methodParents":[],"nodeIndex":43},{"cfgs":[],"code":"logger.warn(\"using dataSource and ignoring dataSourceClassName\")","dfgs":[],"fName":"src_main_java_com_zaxxer_hikari_HikariConfig.java","fieldParents":[],"isDel":false,"lineBeg":749,"lineEnd":749,"lineMapIndex":14,"methodParents":[],"nodeIndex":44},{"cfgs":[47,46],"code":"logger.warn(\"validationTimeout is greater than connectionTimeout, setting to connectionTimeout.\")","dfgs":[47,46],"fName":"src_main_java_com_zaxxer_hikari_HikariConfig.java","fieldParents":[],"isDel":false,"lineBeg":766,"lineEnd":766,"lineMapIndex":15,"methodParents":[],"nodeIndex":45},{"cfgs":[47],"code":"logger.warn(\"maxLifetime is less than 30000ms, setting to default {}ms.\", MAX_LIFETIME)","dfgs":[47],"fName":"src_main_java_com_zaxxer_hikari_HikariConfig.java","fieldParents":[],"isDel":false,"lineBeg":779,"lineEnd":779,"lineMapIndex":16,"methodParents":[],"nodeIndex":46},{"cfgs":[],"code":"logger.warn(\"idleTimeout is less than 10000ms, setting to default {}ms.\", IDLE_TIMEOUT)","dfgs":[],"fName":"src_main_java_com_zaxxer_hikari_HikariConfig.java","fieldParents":[],"isDel":false,"lineBeg":784,"lineEnd":784,"lineMapIndex":17,"methodParents":[],"nodeIndex":47},{"cfgs":[],"code":"Assert.assertTrue(ise.getMessage().contains(\"class of driverClassName \"))","dfgs":[],"fName":"src_test_java_com_zaxxer_hikari_TestValidation.java","fieldParents":[],"isDel":false,"lineBeg":77,"lineEnd":77,"lineMapIndex":18,"methodParents":[],"nodeIndex":48},{"cfgs":[],"code":"Assert.assertTrue(ise.getMessage().contains(\"either dataSource\"))","dfgs":[],"fName":"src_test_java_com_zaxxer_hikari_TestValidation.java","fieldParents":[],"isDel":false,"lineBeg":90,"lineEnd":90,"lineMapIndex":19,"methodParents":[],"nodeIndex":49},{"cfgs":[],"code":"Assert.assertTrue(ise.getMessage().contains(\"cannot use\"))","dfgs":[],"fName":"src_test_java_com_zaxxer_hikari_TestValidation.java","fieldParents":[],"isDel":false,"lineBeg":187,"lineEnd":187,"lineMapIndex":20,"methodParents":[],"nodeIndex":50},{"cfgs":[52],"code":"Assert.assertTrue(new String(baos.toByteArray()).contains(\"using dataSource\"))","dfgs":[52],"fName":"src_test_java_com_zaxxer_hikari_TestValidation.java","fieldParents":[],"isDel":false,"lineBeg":204,"lineEnd":204,"lineMapIndex":21,"methodParents":[],"nodeIndex":51},{"cfgs":[],"code":"Assert.fail()","dfgs":[],"fName":"src_test_java_com_zaxxer_hikari_TestValidation.java","fieldParents":[],"isDel":false,"lineBeg":207,"lineEnd":207,"lineMapIndex":22,"methodParents":[],"nodeIndex":52},{"cfgs":[54],"code":"LOGGER.info(\"Hikari pool {} is shutting down.\", configuration.getPoolName())","dfgs":[54],"fName":"src_main_java_com_zaxxer_hikari_pool_HikariPool.java","fieldParents":[],"isDel":false,"lineBeg":253,"lineEnd":253,"lineMapIndex":23,"methodParents":[],"nodeIndex":53},{"cfgs":[],"code":"final ExecutorService assassinExecutor = createThreadPoolExecutor(configuration.getMaximumPoolSize(), \"Hikari connection assassin\",configuration.getThreadFactory(), new ThreadPoolExecutor.CallerRunsPolicy())","dfgs":[],"fName":"src_main_java_com_zaxxer_hikari_pool_HikariPool.java","fieldParents":[],"isDel":false,"lineBeg":263,"lineEnd":264,"lineMapIndex":24,"methodParents":[],"nodeIndex":54},{"cfgs":[],"code":"poolUtils.setupConnection(connection, configuration.getConnectionInitSql(), isAutoCommit, isReadOnly, transactionIsolation, catalog)","dfgs":[],"fName":"src_main_java_com_zaxxer_hikari_pool_HikariPool.java","fieldParents":[],"isDel":false,"lineBeg":512,"lineEnd":512,"lineMapIndex":25,"methodParents":[29],"nodeIndex":55},{"cfgs":[],"code":"LOGGER.info(\"Hikari pool {} is starting.\", configuration.getPoolName())","dfgs":[],"fName":"src_main_java_com_zaxxer_hikari_HikariDataSource.java","fieldParents":[],"isDel":false,"lineBeg":72,"lineEnd":72,"lineMapIndex":27,"methodParents":[],"nodeIndex":56},{"cfgs":[],"code":"LOGGER.info(\"Hikari pool {} is starting.\", getPoolName())","dfgs":[],"fName":"src_main_java_com_zaxxer_hikari_HikariDataSource.java","fieldParents":[],"isDel":false,"lineBeg":95,"lineEnd":95,"lineMapIndex":28,"methodParents":[],"nodeIndex":57}]