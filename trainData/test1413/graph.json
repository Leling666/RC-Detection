[{"cfgs":[],"code":"inline(\"var x = a + b; print(x);      x = a - b; print(x)\",\"var x;         print(a + b);             print(a - b)\")","dfgs":[],"fName":"test_com_google_javascript_jscomp_FlowSensitiveInlineVariablesTest.java","fieldParents":[],"isDel":true,"lineBeg":195,"lineEnd":196,"lineMapIndex":7,"methodParents":[],"nodeIndex":0},{"cfgs":[],"code":"inline(\"var x; if (g) { x= a + b; print(x)    }  x = a - b; print(x)\",\"var x; if (g) {           print(a + b)}             print(a - b)\")","dfgs":[],"fName":"test_com_google_javascript_jscomp_FlowSensitiveInlineVariablesTest.java","fieldParents":[],"isDel":true,"lineBeg":201,"lineEnd":202,"lineMapIndex":8,"methodParents":[],"nodeIndex":1},{"cfgs":[],"code":"inline(\"var y; var x = noSFX(y); print(x)\", \"var y;var x;print(noSFX(y))\")","dfgs":[],"fName":"test_com_google_javascript_jscomp_FlowSensitiveInlineVariablesTest.java","fieldParents":[],"isDel":true,"lineBeg":318,"lineEnd":318,"lineMapIndex":9,"methodParents":[],"nodeIndex":2},{"cfgs":[],"code":"inline(\"var y; var x = noSFX(Y), z = noSFX(); noSFX(); noSFX(), print(x)\",\"var y; var x, z = noSFX(); noSFX(); noSFX(), print(noSFX(Y))\")","dfgs":[],"fName":"test_com_google_javascript_jscomp_FlowSensitiveInlineVariablesTest.java","fieldParents":[],"isDel":true,"lineBeg":348,"lineEnd":349,"lineMapIndex":10,"methodParents":[],"nodeIndex":3},{"cfgs":[],"code":"NodeTraversal.traverse(compiler, rValue,new AbstractCfgNodeTraversalCallback() {@Overridepublic void visit(NodeTraversal t, Node n, Node parent) {if (n.isName() && jsScope.isDeclared(n.getString(), true)) {def.depends.add(jsScope.getVar(n.getString()));}}})","dfgs":[],"fName":"src_com_google_javascript_jscomp_MustBeReachingVariableDef.java","fieldParents":[],"isDel":true,"lineBeg":391,"lineEnd":399,"lineMapIndex":-1,"methodParents":[],"nodeIndex":4},{"cfgs":[],"code":"(new NodeTraversal(compiler, this)).traverse(root)","dfgs":[],"fName":"src_com_google_javascript_jscomp_FlowSensitiveInlineVariables.java","fieldParents":[],"isDel":true,"lineBeg":157,"lineEnd":157,"lineMapIndex":22,"methodParents":[],"nodeIndex":5},{"cfgs":[],"code":"public static final String EXTERN_FUNCTIONS = \"\" +\"var print;\\n\" +\"/** @nosideeffects */ function noSFX() {} \\n\" +\"                      function hasSFX() {} \\n\"","dfgs":[],"fName":"test_com_google_javascript_jscomp_FlowSensitiveInlineVariablesTest.java","fieldParents":[],"isDel":false,"lineBeg":27,"lineEnd":30,"lineMapIndex":-1,"methodParents":[],"nodeIndex":6},{"cfgs":[],"code":"inline(\"var a,b;\" +\"var x = a + b; print(x);      x = a - b; print(x)\",\"var a,b;\" +\"var x;         print(a + b);             print(a - b)\")","dfgs":[],"fName":"test_com_google_javascript_jscomp_FlowSensitiveInlineVariablesTest.java","fieldParents":[],"isDel":false,"lineBeg":196,"lineEnd":200,"lineMapIndex":0,"methodParents":[],"nodeIndex":7},{"cfgs":[],"code":"inline(\"var a,b;\" +\"var x; if (g) { x= a + b; print(x)    }  x = a - b; print(x)\",\"var a,b;\" +\"var x; if (g) {           print(a + b)}             print(a - b)\")","dfgs":[],"fName":"test_com_google_javascript_jscomp_FlowSensitiveInlineVariablesTest.java","fieldParents":[],"isDel":false,"lineBeg":205,"lineEnd":209,"lineMapIndex":1,"methodParents":[],"nodeIndex":8},{"cfgs":[],"code":"noInline(\"var y; var x = noSFX(y); print(x)\")","dfgs":[],"fName":"test_com_google_javascript_jscomp_FlowSensitiveInlineVariablesTest.java","fieldParents":[],"isDel":false,"lineBeg":329,"lineEnd":329,"lineMapIndex":2,"methodParents":[],"nodeIndex":9},{"cfgs":[],"code":"noInline(\"var y; var x = noSFX(y), z = noSFX(); noSFX(); noSFX(), print(x)\")","dfgs":[],"fName":"test_com_google_javascript_jscomp_FlowSensitiveInlineVariablesTest.java","fieldParents":[],"isDel":false,"lineBeg":363,"lineEnd":364,"lineMapIndex":3,"methodParents":[],"nodeIndex":10},{"cfgs":[12],"code":"public void testIssue698() ","dfgs":[12],"fName":"test_com_google_javascript_jscomp_FlowSensitiveInlineVariablesTest.java","fieldParents":[],"isDel":false,"lineBeg":419,"lineEnd":419,"lineMapIndex":-1,"methodParents":[],"nodeIndex":11},{"cfgs":[],"code":"inline(\"var x = ''; \"+ \"unknown.length < 2 && (unknown='0' + unknown);\"+ \"x = x + unknown; \"+ \"unknown.length < 3 && (unknown='0' + unknown);\"+ \"x = x + unknown; \"+ \"return x;\",\"var x; \"+ \"unknown.length < 2 && (unknown='0' + unknown);\"+ \"x = '' + unknown; \"+ \"unknown.length < 3 && (unknown='0' + unknown);\"+ \"x = x + unknown; \"+ \"return x;\")","dfgs":[],"fName":"test_com_google_javascript_jscomp_FlowSensitiveInlineVariablesTest.java","fieldParents":[],"isDel":false,"lineBeg":423,"lineEnd":435,"lineMapIndex":-1,"methodParents":[],"nodeIndex":12},{"cfgs":[],"code":"private boolean unknownDependencies = false","dfgs":[],"fName":"src_com_google_javascript_jscomp_MustBeReachingVariableDef.java","fieldParents":[],"isDel":false,"lineBeg":71,"lineEnd":71,"lineMapIndex":-1,"methodParents":[],"nodeIndex":13},{"cfgs":[],"code":"if (n.isName())","dfgs":[],"fName":"src_com_google_javascript_jscomp_MustBeReachingVariableDef.java","fieldParents":[],"isDel":false,"lineBeg":397,"lineEnd":397,"lineMapIndex":-1,"methodParents":[],"nodeIndex":14},{"cfgs":[],"code":"Var dep = jsScope.getVar(n.getString())","dfgs":[],"fName":"src_com_google_javascript_jscomp_MustBeReachingVariableDef.java","fieldParents":[],"isDel":false,"lineBeg":398,"lineEnd":398,"lineMapIndex":-1,"methodParents":[],"nodeIndex":15},{"cfgs":[],"code":"if (dep == null)","dfgs":[],"fName":"src_com_google_javascript_jscomp_MustBeReachingVariableDef.java","fieldParents":[],"isDel":false,"lineBeg":399,"lineEnd":399,"lineMapIndex":-1,"methodParents":[],"nodeIndex":16},{"cfgs":[],"code":"def.unknownDependencies = true","dfgs":[],"fName":"src_com_google_javascript_jscomp_MustBeReachingVariableDef.java","fieldParents":[13],"isDel":false,"lineBeg":400,"lineEnd":400,"lineMapIndex":-1,"methodParents":[],"nodeIndex":17},{"cfgs":[],"code":"else","dfgs":[],"fName":"src_com_google_javascript_jscomp_MustBeReachingVariableDef.java","fieldParents":[],"isDel":false,"lineBeg":401,"lineEnd":401,"lineMapIndex":-1,"methodParents":[],"nodeIndex":18},{"cfgs":[],"code":"def.depends.add(dep)","dfgs":[],"fName":"src_com_google_javascript_jscomp_MustBeReachingVariableDef.java","fieldParents":[],"isDel":false,"lineBeg":402,"lineEnd":402,"lineMapIndex":-1,"methodParents":[],"nodeIndex":19},{"cfgs":[21],"code":"if (def.unknownDependencies)","dfgs":[],"fName":"src_com_google_javascript_jscomp_MustBeReachingVariableDef.java","fieldParents":[13],"isDel":false,"lineBeg":435,"lineEnd":435,"lineMapIndex":-1,"methodParents":[],"nodeIndex":20},{"cfgs":[],"code":"return true","dfgs":[],"fName":"src_com_google_javascript_jscomp_MustBeReachingVariableDef.java","fieldParents":[],"isDel":false,"lineBeg":436,"lineEnd":436,"lineMapIndex":-1,"methodParents":[],"nodeIndex":21},{"cfgs":[],"code":"(new NodeTraversal(compiler, this)).traverseRoots(externs, root)","dfgs":[],"fName":"src_com_google_javascript_jscomp_FlowSensitiveInlineVariables.java","fieldParents":[],"isDel":false,"lineBeg":157,"lineEnd":157,"lineMapIndex":5,"methodParents":[],"nodeIndex":22},{"cfgs":[],"code":"AbstractCfgNodeTraversalCallback gatherCb =new AbstractCfgNodeTraversalCallback() {@Overridepublic void visit(NodeTraversal t, Node n, Node parent) {if (n.isName()) {// Make sure that the name node is purely a read.if ((NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == n)|| parent.isVar() || parent.isInc() ||parent.isDec() || parent.isParamList() ||parent.isCatch()) {return;}String name = n.getString();if (compiler.getCodingConvention().isExported(name)) {return;}Node defNode = reachingDef.getDef(name, cfgNode);// TODO(nicksantos): We need to add some notion of @const outer// scope vars. We can inline those just fine.if (defNode != null &&!reachingDef.dependsOnOuterScopeVars(name, cfgNode)) {candidates.add(new Candidate(name, defNode, n, cfgNode));}}}}","dfgs":[],"fName":"src_com_google_javascript_jscomp_FlowSensitiveInlineVariables.java","fieldParents":[],"isDel":false,"lineBeg":187,"lineEnd":216,"lineMapIndex":-1,"methodParents":[],"nodeIndex":23}]