[{"cfgs":[],"code":"lastAccess = clockSource.currentTime()","dfgs":[],"fName":"src_main_java_com_zaxxer_hikari_pool_ProxyConnection.java","fieldParents":[],"isDel":true,"lineBeg":174,"lineEnd":174,"lineMapIndex":67,"methodParents":[],"nodeIndex":0},{"cfgs":[],"code":"return (T) delegate.unwrap(iface)","dfgs":[],"fName":"src_main_java_com_zaxxer_hikari_pool_ProxyConnection.java","fieldParents":[],"isDel":true,"lineBeg":436,"lineEnd":436,"lineMapIndex":68,"methodParents":[1],"nodeIndex":1},{"cfgs":[],"code":"InvocationHandler handler = new InvocationHandler() {@Overridepublic Object invoke(Object proxy, Method method, Object[] args) throws Throwable{final String methodName = method.getName();if (\"abort\".equals(methodName)) {return Void.TYPE;}else if (\"isValid\".equals(methodName)) {return Boolean.FALSE;}else if (\"toString\".equals(methodName)) {return ClosedConnection.class.getCanonicalName();}throw new SQLException(\"Connection is closed\");}}","dfgs":[],"fName":"src_main_java_com_zaxxer_hikari_pool_ProxyConnection.java","fieldParents":[],"isDel":true,"lineBeg":452,"lineEnd":470,"lineMapIndex":69,"methodParents":[],"nodeIndex":2},{"cfgs":[],"code":"if (\"abort\".equals(methodName))","dfgs":[],"fName":"src_main_java_com_zaxxer_hikari_pool_ProxyConnection.java","fieldParents":[],"isDel":true,"lineBeg":458,"lineEnd":458,"lineMapIndex":-1,"methodParents":[],"nodeIndex":3},{"cfgs":[5],"code":"HikariDataSource ds = new HikariDataSource(config)","dfgs":[7],"fName":"src_test_java_com_zaxxer_hikari_pool_TestProxies.java","fieldParents":[],"isDel":true,"lineBeg":28,"lineEnd":28,"lineMapIndex":-1,"methodParents":[],"nodeIndex":4},{"cfgs":[],"code":"try ","dfgs":[],"fName":"src_test_java_com_zaxxer_hikari_pool_TestProxies.java","fieldParents":[],"isDel":true,"lineBeg":29,"lineEnd":29,"lineMapIndex":71,"methodParents":[],"nodeIndex":5},{"cfgs":[],"code":"","dfgs":[],"fName":"src_test_java_com_zaxxer_hikari_pool_TestProxies.java","fieldParents":[],"isDel":true,"lineBeg":56,"lineEnd":56,"lineMapIndex":-1,"methodParents":[],"nodeIndex":6},{"cfgs":[],"code":"ds.close()","dfgs":[],"fName":"src_test_java_com_zaxxer_hikari_pool_TestProxies.java","fieldParents":[],"isDel":true,"lineBeg":57,"lineEnd":57,"lineMapIndex":-1,"methodParents":[],"nodeIndex":7},{"cfgs":[9],"code":"HikariDataSource ds = new HikariDataSource(config)","dfgs":[11],"fName":"src_test_java_com_zaxxer_hikari_pool_TestProxies.java","fieldParents":[],"isDel":true,"lineBeg":70,"lineEnd":70,"lineMapIndex":-1,"methodParents":[],"nodeIndex":8},{"cfgs":[11],"code":"try ","dfgs":[],"fName":"src_test_java_com_zaxxer_hikari_pool_TestProxies.java","fieldParents":[],"isDel":true,"lineBeg":71,"lineEnd":71,"lineMapIndex":72,"methodParents":[],"nodeIndex":9},{"cfgs":[],"code":"","dfgs":[],"fName":"src_test_java_com_zaxxer_hikari_pool_TestProxies.java","fieldParents":[],"isDel":true,"lineBeg":90,"lineEnd":90,"lineMapIndex":-1,"methodParents":[],"nodeIndex":10},{"cfgs":[],"code":"ds.close()","dfgs":[],"fName":"src_test_java_com_zaxxer_hikari_pool_TestProxies.java","fieldParents":[],"isDel":true,"lineBeg":91,"lineEnd":91,"lineMapIndex":-1,"methodParents":[],"nodeIndex":11},{"cfgs":[13],"code":"HikariDataSource ds = new HikariDataSource(config)","dfgs":[15],"fName":"src_test_java_com_zaxxer_hikari_pool_TestProxies.java","fieldParents":[],"isDel":true,"lineBeg":105,"lineEnd":105,"lineMapIndex":-1,"methodParents":[],"nodeIndex":12},{"cfgs":[],"code":"try ","dfgs":[],"fName":"src_test_java_com_zaxxer_hikari_pool_TestProxies.java","fieldParents":[],"isDel":true,"lineBeg":106,"lineEnd":106,"lineMapIndex":73,"methodParents":[],"nodeIndex":13},{"cfgs":[],"code":"","dfgs":[],"fName":"src_test_java_com_zaxxer_hikari_pool_TestProxies.java","fieldParents":[],"isDel":true,"lineBeg":207,"lineEnd":207,"lineMapIndex":-1,"methodParents":[],"nodeIndex":14},{"cfgs":[],"code":"ds.close()","dfgs":[],"fName":"src_test_java_com_zaxxer_hikari_pool_TestProxies.java","fieldParents":[],"isDel":true,"lineBeg":208,"lineEnd":208,"lineMapIndex":-1,"methodParents":[],"nodeIndex":15},{"cfgs":[17],"code":"HikariDataSource ds = new HikariDataSource(config)","dfgs":[19],"fName":"src_test_java_com_zaxxer_hikari_pool_TestProxies.java","fieldParents":[],"isDel":true,"lineBeg":221,"lineEnd":221,"lineMapIndex":-1,"methodParents":[],"nodeIndex":16},{"cfgs":[19],"code":"try ","dfgs":[],"fName":"src_test_java_com_zaxxer_hikari_pool_TestProxies.java","fieldParents":[],"isDel":true,"lineBeg":222,"lineEnd":222,"lineMapIndex":74,"methodParents":[],"nodeIndex":17},{"cfgs":[],"code":"","dfgs":[],"fName":"src_test_java_com_zaxxer_hikari_pool_TestProxies.java","fieldParents":[],"isDel":true,"lineBeg":314,"lineEnd":314,"lineMapIndex":-1,"methodParents":[],"nodeIndex":18},{"cfgs":[],"code":"ds.close()","dfgs":[],"fName":"src_test_java_com_zaxxer_hikari_pool_TestProxies.java","fieldParents":[],"isDel":true,"lineBeg":315,"lineEnd":315,"lineMapIndex":-1,"methodParents":[],"nodeIndex":19},{"cfgs":[],"code":"POOL_NUMBER = new AtomicInteger()","dfgs":[],"fName":"src_main_java_com_zaxxer_hikari_HikariConfig.java","fieldParents":[],"isDel":true,"lineBeg":103,"lineEnd":103,"lineMapIndex":75,"methodParents":[],"nodeIndex":20},{"cfgs":[],"code":"metricRegistry = (MetricRegistry) initCtx.lookup((String) metricRegistry)","dfgs":[],"fName":"src_main_java_com_zaxxer_hikari_HikariConfig.java","fieldParents":[],"isDel":true,"lineBeg":501,"lineEnd":501,"lineMapIndex":76,"methodParents":[],"nodeIndex":21},{"cfgs":[],"code":"healthCheckRegistry = (HealthCheckRegistry) initCtx.lookup((String) healthCheckRegistry)","dfgs":[],"fName":"src_main_java_com_zaxxer_hikari_HikariConfig.java","fieldParents":[],"isDel":true,"lineBeg":537,"lineEnd":537,"lineMapIndex":77,"methodParents":[],"nodeIndex":22},{"cfgs":[],"code":"if (leakDetectionThreshold < TimeUnit.SECONDS.toMillis(2) || (leakDetectionThreshold > maxLifetime && maxLifetime > 0))","dfgs":[],"fName":"src_main_java_com_zaxxer_hikari_HikariConfig.java","fieldParents":[],"isDel":true,"lineBeg":841,"lineEnd":841,"lineMapIndex":78,"methodParents":[],"nodeIndex":23},{"cfgs":[],"code":"final AtomicReference<Exception> ref = new AtomicReference<Exception>(null)","dfgs":[],"fName":"src_test_java_com_zaxxer_hikari_pool_ConnectionRaceConditionTest.java","fieldParents":[],"isDel":true,"lineBeg":37,"lineEnd":37,"lineMapIndex":79,"methodParents":[],"nodeIndex":24},{"cfgs":[],"code":"return (T) delegate.unwrap(iface)","dfgs":[],"fName":"src_main_java_com_zaxxer_hikari_pool_ProxyResultSet.java","fieldParents":[],"isDel":true,"lineBeg":101,"lineEnd":101,"lineMapIndex":80,"methodParents":[1],"nodeIndex":25},{"cfgs":[],"code":"throw new SQLException(\"Wrapped ResultSet is not an instance of \" + iface)","dfgs":[],"fName":"src_main_java_com_zaxxer_hikari_pool_ProxyResultSet.java","fieldParents":[],"isDel":true,"lineBeg":104,"lineEnd":104,"lineMapIndex":81,"methodParents":[],"nodeIndex":26},{"cfgs":[28],"code":"ArrayList<Statement> verifyList = new ArrayList<Statement>()","dfgs":[],"fName":"src_test_java_com_zaxxer_hikari_pool_TestFastList.java","fieldParents":[],"isDel":true,"lineBeg":17,"lineEnd":17,"lineMapIndex":82,"methodParents":[],"nodeIndex":27},{"cfgs":[],"code":"FastList<Statement> list = new FastList<Statement>(Statement.class)","dfgs":[],"fName":"src_test_java_com_zaxxer_hikari_pool_TestFastList.java","fieldParents":[],"isDel":true,"lineBeg":19,"lineEnd":19,"lineMapIndex":83,"methodParents":[],"nodeIndex":28},{"cfgs":[30],"code":"ArrayList<Statement> verifyList = new ArrayList<Statement>()","dfgs":[],"fName":"src_test_java_com_zaxxer_hikari_pool_TestFastList.java","fieldParents":[],"isDel":true,"lineBeg":39,"lineEnd":39,"lineMapIndex":84,"methodParents":[],"nodeIndex":29},{"cfgs":[],"code":"FastList<Statement> list = new FastList<Statement>(Statement.class)","dfgs":[],"fName":"src_test_java_com_zaxxer_hikari_pool_TestFastList.java","fieldParents":[],"isDel":true,"lineBeg":41,"lineEnd":41,"lineMapIndex":85,"methodParents":[],"nodeIndex":30},{"cfgs":[32],"code":"ArrayList<Statement> verifyList = new ArrayList<Statement>()","dfgs":[],"fName":"src_test_java_com_zaxxer_hikari_pool_TestFastList.java","fieldParents":[],"isDel":true,"lineBeg":61,"lineEnd":61,"lineMapIndex":86,"methodParents":[],"nodeIndex":31},{"cfgs":[],"code":"FastList<Statement> list = new FastList<Statement>(Statement.class)","dfgs":[],"fName":"src_test_java_com_zaxxer_hikari_pool_TestFastList.java","fieldParents":[],"isDel":true,"lineBeg":63,"lineEnd":63,"lineMapIndex":87,"methodParents":[],"nodeIndex":32},{"cfgs":[],"code":"FastList<Statement> list = new FastList<Statement>(Statement.class)","dfgs":[],"fName":"src_test_java_com_zaxxer_hikari_pool_TestFastList.java","fieldParents":[],"isDel":true,"lineBeg":81,"lineEnd":81,"lineMapIndex":88,"methodParents":[],"nodeIndex":33},{"cfgs":[],"code":"FastList<Statement> list = new FastList<Statement>(Statement.class)","dfgs":[],"fName":"src_test_java_com_zaxxer_hikari_pool_TestFastList.java","fieldParents":[],"isDel":true,"lineBeg":96,"lineEnd":96,"lineMapIndex":89,"methodParents":[],"nodeIndex":34},{"cfgs":[],"code":"FastList<Base> list = new FastList<Base>(Base.class, 2)","dfgs":[],"fName":"src_test_java_com_zaxxer_hikari_pool_TestFastList.java","fieldParents":[],"isDel":true,"lineBeg":121,"lineEnd":121,"lineMapIndex":90,"methodParents":[],"nodeIndex":35},{"cfgs":[],"code":"interface Base2 extends Base","dfgs":[],"fName":"src_test_java_com_zaxxer_hikari_pool_TestFastList.java","fieldParents":[],"isDel":true,"lineBeg":132,"lineEnd":133,"lineMapIndex":91,"methodParents":[],"nodeIndex":36},{"cfgs":[],"code":"targetCt.setModifiers(Modifier.FINAL)","dfgs":[],"fName":"src_main_java_com_zaxxer_hikari_util_JavassistProxyFactory.java","fieldParents":[],"isDel":true,"lineBeg":122,"lineEnd":122,"lineMapIndex":92,"methodParents":[],"nodeIndex":37},{"cfgs":[],"code":"Set<Class<?>> interfaces = new HashSet<Class<?>>()","dfgs":[],"fName":"src_main_java_com_zaxxer_hikari_util_JavassistProxyFactory.java","fieldParents":[],"isDel":true,"lineBeg":222,"lineEnd":222,"lineMapIndex":93,"methodParents":[],"nodeIndex":38},{"cfgs":[],"code":"final ClockSource INSTANCE = Factory.create()","dfgs":[],"fName":"src_main_java_com_zaxxer_hikari_util_ClockSource.java","fieldParents":[],"isDel":true,"lineBeg":38,"lineEnd":38,"lineMapIndex":94,"methodParents":[],"nodeIndex":39},{"cfgs":[],"code":"public final class Factory","dfgs":[],"fName":"src_main_java_com_zaxxer_hikari_util_Sequence.java","fieldParents":[],"isDel":true,"lineBeg":48,"lineEnd":49,"lineMapIndex":95,"methodParents":[],"nodeIndex":40},{"cfgs":[],"code":"LOGGER.warn(\"{} - Retrograde clock change detected (housekeeper delta={}), soft-evicting connections from pool.\", clockSource.elapsedDisplayString(previous, now), poolName)","dfgs":[],"fName":"src_main_java_com_zaxxer_hikari_pool_HikariPool.java","fieldParents":[],"isDel":true,"lineBeg":592,"lineEnd":593,"lineMapIndex":96,"methodParents":[],"nodeIndex":41},{"cfgs":[],"code":"afterPrefix = \"After cleanup  \"","dfgs":[],"fName":"src_main_java_com_zaxxer_hikari_pool_HikariPool.java","fieldParents":[],"isDel":true,"lineBeg":612,"lineEnd":612,"lineMapIndex":97,"methodParents":[],"nodeIndex":42},{"cfgs":[],"code":"return (T) unwrappedDataSource.unwrap(iface)","dfgs":[],"fName":"src_main_java_com_zaxxer_hikari_HikariDataSource.java","fieldParents":[],"isDel":true,"lineBeg":169,"lineEnd":169,"lineMapIndex":98,"methodParents":[1],"nodeIndex":43},{"cfgs":[],"code":"ConcurrentBag<PoolEntry> bag = new ConcurrentBag<PoolEntry>( new IBagStateListener() {@Overridepublic Future<Boolean> addBagItem(){return null;}})","dfgs":[],"fName":"src_test_java_com_zaxxer_hikari_pool_TestConcurrentBag.java","fieldParents":[],"isDel":true,"lineBeg":66,"lineEnd":72,"lineMapIndex":99,"methodParents":[],"nodeIndex":44},{"cfgs":[46],"code":"HikariDataSource ds = new HikariDataSource(config)","dfgs":[47],"fName":"src_test_java_com_zaxxer_hikari_pool_UnwrapTest.java","fieldParents":[],"isDel":true,"lineBeg":45,"lineEnd":45,"lineMapIndex":-1,"methodParents":[],"nodeIndex":45},{"cfgs":[47],"code":"try ","dfgs":[],"fName":"src_test_java_com_zaxxer_hikari_pool_UnwrapTest.java","fieldParents":[],"isDel":true,"lineBeg":47,"lineEnd":47,"lineMapIndex":100,"methodParents":[],"nodeIndex":46},{"cfgs":[48],"code":"ds.getConnection().close()","dfgs":[48],"fName":"src_test_java_com_zaxxer_hikari_pool_UnwrapTest.java","fieldParents":[],"isDel":true,"lineBeg":48,"lineEnd":48,"lineMapIndex":101,"methodParents":[],"nodeIndex":47},{"cfgs":[49],"code":"Assert.assertSame(\"Idle connections not as expected\", 1, TestElf.getPool(ds).getIdleConnections())","dfgs":[50,49],"fName":"src_test_java_com_zaxxer_hikari_pool_UnwrapTest.java","fieldParents":[],"isDel":true,"lineBeg":49,"lineEnd":49,"lineMapIndex":102,"methodParents":[],"nodeIndex":48},{"cfgs":[50],"code":"Connection connection = ds.getConnection()","dfgs":[50,54],"fName":"src_test_java_com_zaxxer_hikari_pool_UnwrapTest.java","fieldParents":[],"isDel":true,"lineBeg":51,"lineEnd":51,"lineMapIndex":103,"methodParents":[],"nodeIndex":49},{"cfgs":[51],"code":"Assert.assertNotNull(connection)","dfgs":[52,51],"fName":"src_test_java_com_zaxxer_hikari_pool_UnwrapTest.java","fieldParents":[],"isDel":true,"lineBeg":52,"lineEnd":52,"lineMapIndex":104,"methodParents":[],"nodeIndex":50},{"cfgs":[52],"code":"StubConnection unwrapped = connection.unwrap(StubConnection.class)","dfgs":[52],"fName":"src_test_java_com_zaxxer_hikari_pool_UnwrapTest.java","fieldParents":[],"isDel":true,"lineBeg":54,"lineEnd":54,"lineMapIndex":105,"methodParents":[1],"nodeIndex":51},{"cfgs":[54],"code":"Assert.assertTrue(\"unwrapped connection is not instance of StubConnection: \" + unwrapped, (unwrapped != null && unwrapped instanceof StubConnection))","dfgs":[],"fName":"src_test_java_com_zaxxer_hikari_pool_UnwrapTest.java","fieldParents":[],"isDel":true,"lineBeg":55,"lineEnd":55,"lineMapIndex":106,"methodParents":[],"nodeIndex":52},{"cfgs":[],"code":"","dfgs":[],"fName":"src_test_java_com_zaxxer_hikari_pool_UnwrapTest.java","fieldParents":[],"isDel":true,"lineBeg":57,"lineEnd":57,"lineMapIndex":-1,"methodParents":[],"nodeIndex":53},{"cfgs":[],"code":"ds.close()","dfgs":[],"fName":"src_test_java_com_zaxxer_hikari_pool_UnwrapTest.java","fieldParents":[],"isDel":true,"lineBeg":58,"lineEnd":58,"lineMapIndex":-1,"methodParents":[],"nodeIndex":54},{"cfgs":[56],"code":"HikariDataSource ds = new HikariDataSource(config)","dfgs":[58],"fName":"src_test_java_com_zaxxer_hikari_pool_UnwrapTest.java","fieldParents":[],"isDel":true,"lineBeg":72,"lineEnd":72,"lineMapIndex":-1,"methodParents":[],"nodeIndex":55},{"cfgs":[58],"code":"try ","dfgs":[],"fName":"src_test_java_com_zaxxer_hikari_pool_UnwrapTest.java","fieldParents":[],"isDel":true,"lineBeg":73,"lineEnd":73,"lineMapIndex":107,"methodParents":[],"nodeIndex":56},{"cfgs":[],"code":"","dfgs":[],"fName":"src_test_java_com_zaxxer_hikari_pool_UnwrapTest.java","fieldParents":[],"isDel":true,"lineBeg":89,"lineEnd":89,"lineMapIndex":-1,"methodParents":[],"nodeIndex":57},{"cfgs":[],"code":"ds.close()","dfgs":[],"fName":"src_test_java_com_zaxxer_hikari_pool_UnwrapTest.java","fieldParents":[],"isDel":true,"lineBeg":90,"lineEnd":90,"lineMapIndex":-1,"methodParents":[],"nodeIndex":58},{"cfgs":[60],"code":"final HikariDataSource ds = new HikariDataSource(config)","dfgs":[61],"fName":"src_test_java_com_zaxxer_hikari_pool_MiscTest.java","fieldParents":[],"isDel":true,"lineBeg":50,"lineEnd":50,"lineMapIndex":-1,"methodParents":[],"nodeIndex":59},{"cfgs":[61],"code":"try ","dfgs":[],"fName":"src_test_java_com_zaxxer_hikari_pool_MiscTest.java","fieldParents":[],"isDel":true,"lineBeg":51,"lineEnd":51,"lineMapIndex":108,"methodParents":[],"nodeIndex":60},{"cfgs":[],"code":"ds.close()","dfgs":[],"fName":"src_test_java_com_zaxxer_hikari_pool_MiscTest.java","fieldParents":[],"isDel":true,"lineBeg":60,"lineEnd":60,"lineMapIndex":-1,"methodParents":[],"nodeIndex":61},{"cfgs":[63],"code":"final HikariDataSource ds = new HikariDataSource(config)","dfgs":[64],"fName":"src_test_java_com_zaxxer_hikari_pool_MiscTest.java","fieldParents":[],"isDel":true,"lineBeg":105,"lineEnd":105,"lineMapIndex":-1,"methodParents":[],"nodeIndex":62},{"cfgs":[64],"code":"try ","dfgs":[],"fName":"src_test_java_com_zaxxer_hikari_pool_MiscTest.java","fieldParents":[],"isDel":true,"lineBeg":106,"lineEnd":106,"lineMapIndex":109,"methodParents":[],"nodeIndex":63},{"cfgs":[],"code":"ds.close()","dfgs":[],"fName":"src_test_java_com_zaxxer_hikari_pool_MiscTest.java","fieldParents":[],"isDel":true,"lineBeg":122,"lineEnd":122,"lineMapIndex":-1,"methodParents":[],"nodeIndex":64},{"cfgs":[],"code":"return ProxyFactory.getProxyResultSet(connection, this, resultSet)","dfgs":[],"fName":"src_main_java_com_zaxxer_hikari_pool_ProxyStatement.java","fieldParents":[],"isDel":true,"lineBeg":112,"lineEnd":112,"lineMapIndex":110,"methodParents":[],"nodeIndex":65},{"cfgs":[],"code":"return (T) delegate.unwrap(iface)","dfgs":[],"fName":"src_main_java_com_zaxxer_hikari_pool_ProxyStatement.java","fieldParents":[],"isDel":true,"lineBeg":235,"lineEnd":235,"lineMapIndex":111,"methodParents":[1],"nodeIndex":66},{"cfgs":[],"code":"lastAccess = clockSource.currentTime()","dfgs":[],"fName":"src_main_java_com_zaxxer_hikari_pool_ProxyConnection.java","fieldParents":[],"isDel":false,"lineBeg":174,"lineEnd":174,"lineMapIndex":0,"methodParents":[],"nodeIndex":67},{"cfgs":[],"code":"return delegate.unwrap(iface)","dfgs":[],"fName":"src_main_java_com_zaxxer_hikari_pool_ProxyConnection.java","fieldParents":[],"isDel":false,"lineBeg":436,"lineEnd":436,"lineMapIndex":1,"methodParents":[68],"nodeIndex":68},{"cfgs":[],"code":"InvocationHandler handler = new InvocationHandler() {@Overridepublic Object invoke(Object proxy, Method method, Object[] args) throws Throwable{final String methodName = method.getName();if (\"abort\".equals(methodName)) {return Void.TYPE;}else if (\"isValid\".equals(methodName)) {return Boolean.FALSE;}else if (\"toString\".equals(methodName)) {return ClosedConnection.class.getCanonicalName();}throw new SQLException(\"Connection is closed\");}}","dfgs":[],"fName":"src_main_java_com_zaxxer_hikari_pool_ProxyConnection.java","fieldParents":[],"isDel":false,"lineBeg":452,"lineEnd":470,"lineMapIndex":2,"methodParents":[],"nodeIndex":69},{"cfgs":[],"code":"if (\"abort\".equals(methodName))","dfgs":[],"fName":"src_main_java_com_zaxxer_hikari_pool_ProxyConnection.java","fieldParents":[],"isDel":false,"lineBeg":458,"lineEnd":458,"lineMapIndex":-1,"methodParents":[],"nodeIndex":70},{"cfgs":[],"code":"try (HikariDataSource ds = new HikariDataSource(config)) ","dfgs":[],"fName":"src_test_java_com_zaxxer_hikari_pool_TestProxies.java","fieldParents":[],"isDel":false,"lineBeg":28,"lineEnd":28,"lineMapIndex":5,"methodParents":[],"nodeIndex":71},{"cfgs":[],"code":"try (HikariDataSource ds = new HikariDataSource(config)) ","dfgs":[],"fName":"src_test_java_com_zaxxer_hikari_pool_TestProxies.java","fieldParents":[],"isDel":false,"lineBeg":66,"lineEnd":66,"lineMapIndex":9,"methodParents":[],"nodeIndex":72},{"cfgs":[],"code":"try (HikariDataSource ds = new HikariDataSource(config)) ","dfgs":[],"fName":"src_test_java_com_zaxxer_hikari_pool_TestProxies.java","fieldParents":[],"isDel":false,"lineBeg":97,"lineEnd":97,"lineMapIndex":13,"methodParents":[],"nodeIndex":73},{"cfgs":[],"code":"try (HikariDataSource ds = new HikariDataSource(config)) ","dfgs":[],"fName":"src_test_java_com_zaxxer_hikari_pool_TestProxies.java","fieldParents":[],"isDel":false,"lineBeg":209,"lineEnd":209,"lineMapIndex":17,"methodParents":[],"nodeIndex":74},{"cfgs":[],"code":"POOL_NUMBER = new AtomicInteger()","dfgs":[],"fName":"src_main_java_com_zaxxer_hikari_HikariConfig.java","fieldParents":[],"isDel":false,"lineBeg":103,"lineEnd":103,"lineMapIndex":20,"methodParents":[],"nodeIndex":75},{"cfgs":[],"code":"metricRegistry = initCtx.lookup((String) metricRegistry)","dfgs":[],"fName":"src_main_java_com_zaxxer_hikari_HikariConfig.java","fieldParents":[],"isDel":false,"lineBeg":501,"lineEnd":501,"lineMapIndex":21,"methodParents":[],"nodeIndex":76},{"cfgs":[],"code":"healthCheckRegistry = initCtx.lookup((String) healthCheckRegistry)","dfgs":[],"fName":"src_main_java_com_zaxxer_hikari_HikariConfig.java","fieldParents":[],"isDel":false,"lineBeg":537,"lineEnd":537,"lineMapIndex":22,"methodParents":[],"nodeIndex":77},{"cfgs":[],"code":"if (leakDetectionThreshold < TimeUnit.SECONDS.toMillis(2) || (leakDetectionThreshold > maxLifetime && maxLifetime > 0))","dfgs":[],"fName":"src_main_java_com_zaxxer_hikari_HikariConfig.java","fieldParents":[],"isDel":false,"lineBeg":841,"lineEnd":841,"lineMapIndex":23,"methodParents":[],"nodeIndex":78},{"cfgs":[],"code":"final AtomicReference<Exception> ref = new AtomicReference<>(null)","dfgs":[],"fName":"src_test_java_com_zaxxer_hikari_pool_ConnectionRaceConditionTest.java","fieldParents":[],"isDel":false,"lineBeg":37,"lineEnd":37,"lineMapIndex":24,"methodParents":[],"nodeIndex":79},{"cfgs":[],"code":"return delegate.unwrap(iface)","dfgs":[],"fName":"src_main_java_com_zaxxer_hikari_pool_ProxyResultSet.java","fieldParents":[],"isDel":false,"lineBeg":101,"lineEnd":101,"lineMapIndex":25,"methodParents":[68],"nodeIndex":80},{"cfgs":[],"code":"throw new SQLException(\"Wrapped ResultSet is not an instance of \" + iface)","dfgs":[],"fName":"src_main_java_com_zaxxer_hikari_pool_ProxyResultSet.java","fieldParents":[],"isDel":false,"lineBeg":104,"lineEnd":104,"lineMapIndex":26,"methodParents":[],"nodeIndex":81},{"cfgs":[83],"code":"ArrayList<Statement> verifyList = new ArrayList<>()","dfgs":[],"fName":"src_test_java_com_zaxxer_hikari_pool_TestFastList.java","fieldParents":[],"isDel":false,"lineBeg":17,"lineEnd":17,"lineMapIndex":27,"methodParents":[],"nodeIndex":82},{"cfgs":[],"code":"FastList<Statement> list = new FastList<>(Statement.class)","dfgs":[],"fName":"src_test_java_com_zaxxer_hikari_pool_TestFastList.java","fieldParents":[],"isDel":false,"lineBeg":19,"lineEnd":19,"lineMapIndex":28,"methodParents":[],"nodeIndex":83},{"cfgs":[85],"code":"ArrayList<Statement> verifyList = new ArrayList<>()","dfgs":[],"fName":"src_test_java_com_zaxxer_hikari_pool_TestFastList.java","fieldParents":[],"isDel":false,"lineBeg":39,"lineEnd":39,"lineMapIndex":29,"methodParents":[],"nodeIndex":84},{"cfgs":[],"code":"FastList<Statement> list = new FastList<>(Statement.class)","dfgs":[],"fName":"src_test_java_com_zaxxer_hikari_pool_TestFastList.java","fieldParents":[],"isDel":false,"lineBeg":41,"lineEnd":41,"lineMapIndex":30,"methodParents":[],"nodeIndex":85},{"cfgs":[87],"code":"ArrayList<Statement> verifyList = new ArrayList<>()","dfgs":[],"fName":"src_test_java_com_zaxxer_hikari_pool_TestFastList.java","fieldParents":[],"isDel":false,"lineBeg":61,"lineEnd":61,"lineMapIndex":31,"methodParents":[],"nodeIndex":86},{"cfgs":[],"code":"FastList<Statement> list = new FastList<>(Statement.class)","dfgs":[],"fName":"src_test_java_com_zaxxer_hikari_pool_TestFastList.java","fieldParents":[],"isDel":false,"lineBeg":63,"lineEnd":63,"lineMapIndex":32,"methodParents":[],"nodeIndex":87},{"cfgs":[],"code":"FastList<Statement> list = new FastList<>(Statement.class)","dfgs":[],"fName":"src_test_java_com_zaxxer_hikari_pool_TestFastList.java","fieldParents":[],"isDel":false,"lineBeg":81,"lineEnd":81,"lineMapIndex":33,"methodParents":[],"nodeIndex":88},{"cfgs":[],"code":"FastList<Statement> list = new FastList<>(Statement.class)","dfgs":[],"fName":"src_test_java_com_zaxxer_hikari_pool_TestFastList.java","fieldParents":[],"isDel":false,"lineBeg":96,"lineEnd":96,"lineMapIndex":34,"methodParents":[],"nodeIndex":89},{"cfgs":[],"code":"FastList<Base> list = new FastList<>(Base.class, 2)","dfgs":[],"fName":"src_test_java_com_zaxxer_hikari_pool_TestFastList.java","fieldParents":[],"isDel":false,"lineBeg":121,"lineEnd":121,"lineMapIndex":35,"methodParents":[],"nodeIndex":90},{"cfgs":[],"code":"interface Base2 extends Base","dfgs":[],"fName":"src_test_java_com_zaxxer_hikari_pool_TestFastList.java","fieldParents":[],"isDel":false,"lineBeg":132,"lineEnd":133,"lineMapIndex":36,"methodParents":[],"nodeIndex":91},{"cfgs":[],"code":"targetCt.setModifiers(Modifier.FINAL)","dfgs":[],"fName":"src_main_java_com_zaxxer_hikari_util_JavassistProxyFactory.java","fieldParents":[],"isDel":false,"lineBeg":122,"lineEnd":122,"lineMapIndex":37,"methodParents":[],"nodeIndex":92},{"cfgs":[],"code":"Set<Class<?>> interfaces = new HashSet<>()","dfgs":[],"fName":"src_main_java_com_zaxxer_hikari_util_JavassistProxyFactory.java","fieldParents":[],"isDel":false,"lineBeg":222,"lineEnd":222,"lineMapIndex":38,"methodParents":[],"nodeIndex":93},{"cfgs":[],"code":"ClockSource INSTANCE = Factory.create()","dfgs":[],"fName":"src_main_java_com_zaxxer_hikari_util_ClockSource.java","fieldParents":[],"isDel":false,"lineBeg":38,"lineEnd":38,"lineMapIndex":39,"methodParents":[],"nodeIndex":94},{"cfgs":[],"code":"final class Factory","dfgs":[],"fName":"src_main_java_com_zaxxer_hikari_util_Sequence.java","fieldParents":[],"isDel":false,"lineBeg":48,"lineEnd":49,"lineMapIndex":40,"methodParents":[],"nodeIndex":95},{"cfgs":[],"code":"LOGGER.warn(\"{} - Retrograde clock change detected (housekeeper delta={}), soft-evicting connections from pool.\",clockSource.elapsedDisplayString(previous, now), poolName)","dfgs":[],"fName":"src_main_java_com_zaxxer_hikari_pool_HikariPool.java","fieldParents":[],"isDel":false,"lineBeg":592,"lineEnd":593,"lineMapIndex":41,"methodParents":[],"nodeIndex":96},{"cfgs":[],"code":"afterPrefix = \"After cleanup  \"","dfgs":[],"fName":"src_main_java_com_zaxxer_hikari_pool_HikariPool.java","fieldParents":[],"isDel":false,"lineBeg":612,"lineEnd":612,"lineMapIndex":42,"methodParents":[],"nodeIndex":97},{"cfgs":[],"code":"return unwrappedDataSource.unwrap(iface)","dfgs":[],"fName":"src_main_java_com_zaxxer_hikari_HikariDataSource.java","fieldParents":[],"isDel":false,"lineBeg":169,"lineEnd":169,"lineMapIndex":43,"methodParents":[68],"nodeIndex":98},{"cfgs":[],"code":"ConcurrentBag<PoolEntry> bag = new ConcurrentBag<>(new IBagStateListener() {@Overridepublic Future<Boolean> addBagItem(){return null;}})","dfgs":[],"fName":"src_test_java_com_zaxxer_hikari_pool_TestConcurrentBag.java","fieldParents":[],"isDel":false,"lineBeg":66,"lineEnd":72,"lineMapIndex":44,"methodParents":[],"nodeIndex":99},{"cfgs":[101],"code":"try (HikariDataSource ds = new HikariDataSource(config)) ","dfgs":[101],"fName":"src_test_java_com_zaxxer_hikari_pool_UnwrapTest.java","fieldParents":[],"isDel":false,"lineBeg":45,"lineEnd":45,"lineMapIndex":46,"methodParents":[],"nodeIndex":100},{"cfgs":[102],"code":"ds.getConnection().close()","dfgs":[102],"fName":"src_test_java_com_zaxxer_hikari_pool_UnwrapTest.java","fieldParents":[],"isDel":false,"lineBeg":46,"lineEnd":46,"lineMapIndex":47,"methodParents":[],"nodeIndex":101},{"cfgs":[103],"code":"Assert.assertSame(\"Idle connections not as expected\", 1, TestElf.getPool(ds).getIdleConnections())","dfgs":[104,103],"fName":"src_test_java_com_zaxxer_hikari_pool_UnwrapTest.java","fieldParents":[],"isDel":false,"lineBeg":47,"lineEnd":47,"lineMapIndex":48,"methodParents":[],"nodeIndex":102},{"cfgs":[104],"code":"Connection connection = ds.getConnection()","dfgs":[104],"fName":"src_test_java_com_zaxxer_hikari_pool_UnwrapTest.java","fieldParents":[],"isDel":false,"lineBeg":49,"lineEnd":49,"lineMapIndex":49,"methodParents":[],"nodeIndex":103},{"cfgs":[105],"code":"Assert.assertNotNull(connection)","dfgs":[106,105],"fName":"src_test_java_com_zaxxer_hikari_pool_UnwrapTest.java","fieldParents":[],"isDel":false,"lineBeg":50,"lineEnd":50,"lineMapIndex":50,"methodParents":[],"nodeIndex":104},{"cfgs":[106],"code":"StubConnection unwrapped = connection.unwrap(StubConnection.class)","dfgs":[106],"fName":"src_test_java_com_zaxxer_hikari_pool_UnwrapTest.java","fieldParents":[],"isDel":false,"lineBeg":52,"lineEnd":52,"lineMapIndex":51,"methodParents":[68],"nodeIndex":105},{"cfgs":[],"code":"Assert.assertTrue(\"unwrapped connection is not instance of StubConnection: \" + unwrapped, (unwrapped != null && unwrapped instanceof StubConnection))","dfgs":[],"fName":"src_test_java_com_zaxxer_hikari_pool_UnwrapTest.java","fieldParents":[],"isDel":false,"lineBeg":53,"lineEnd":53,"lineMapIndex":52,"methodParents":[],"nodeIndex":106},{"cfgs":[],"code":"try (HikariDataSource ds = new HikariDataSource(config)) ","dfgs":[],"fName":"src_test_java_com_zaxxer_hikari_pool_UnwrapTest.java","fieldParents":[],"isDel":false,"lineBeg":67,"lineEnd":67,"lineMapIndex":56,"methodParents":[],"nodeIndex":107},{"cfgs":[],"code":"try (HikariDataSource ds = new HikariDataSource(config)) ","dfgs":[],"fName":"src_test_java_com_zaxxer_hikari_pool_MiscTest.java","fieldParents":[],"isDel":false,"lineBeg":50,"lineEnd":50,"lineMapIndex":60,"methodParents":[],"nodeIndex":108},{"cfgs":[],"code":"try (HikariDataSource ds = new HikariDataSource(config)) ","dfgs":[],"fName":"src_test_java_com_zaxxer_hikari_pool_MiscTest.java","fieldParents":[],"isDel":false,"lineBeg":103,"lineEnd":103,"lineMapIndex":63,"methodParents":[],"nodeIndex":109},{"cfgs":[],"code":"return ProxyFactory.getProxyResultSet(connection, this, resultSet)","dfgs":[],"fName":"src_main_java_com_zaxxer_hikari_pool_ProxyStatement.java","fieldParents":[],"isDel":false,"lineBeg":112,"lineEnd":112,"lineMapIndex":65,"methodParents":[],"nodeIndex":110},{"cfgs":[],"code":"return delegate.unwrap(iface)","dfgs":[],"fName":"src_main_java_com_zaxxer_hikari_pool_ProxyStatement.java","fieldParents":[],"isDel":false,"lineBeg":235,"lineEnd":235,"lineMapIndex":66,"methodParents":[68],"nodeIndex":111}]