[{"cfgs":[],"code":"executeInTransaction(\"CALL ga.nlp.workflow.processor.create('testProcess', \"+ \"'com.graphaware.nlp.workflow.processor.WorkflowTextProcessor', \"+ \"{\"+ \"textProcessor: 'com.graphaware.nlp.stub.StubTextProcessor', \"+ \"pipeline: 'customStopWords', \"+ \"processingSteps: {tokenize: true, dependency: true}, \"+ \"stopWords: '+,have, use, can, should, from, may, result, all, during, must, when, time, could, require, work, need, provide, nasa, support, perform, include, which, would, other, level, more, make, between, you, do, about, above, after, again, against, am, any, because, been, before, being, below, both, did, do, does, doing, down, each, few, further, had, has, having, he, her, here, hers, herself, him, himself, his, how, i, its, itself, just, me, most, my, myself, nor, now, off, once, only, our, ours, ourselves, out, over, own, same, she, so, some, than, theirs, them, themselves, those, through, too, under, until, up, very, we, were, what, where, while, who, whom, why, you, your, yours, yourself, yourselves, small, big, little, much, more, some, several, also, any, both, rdquo, ldquo, raquo', \"+ \"threadNumber: 20})\",((Result result) -> {assertTrue(result.hasNext());Map<String, Object> next = result.next();Assert.assertEquals(\"testProcess\", (String) next.get(\"name\"));Assert.assertEquals(\"com.graphaware.nlp.workflow.processor.WorkflowTextProcessor\", (String) next.get(\"className\"));}))","dfgs":[],"fName":"src_test_java_com_graphaware_nlp_dsl_workflow_WorkflowProcessorTest.java","fieldParents":[],"isDel":true,"lineBeg":41,"lineEnd":54,"lineMapIndex":16,"methodParents":[],"nodeIndex":0},{"cfgs":[],"code":"executeInTransaction(\"CALL ga.nlp.annotate({text: 'hello my name is Frank', id: 'test-proc', checkLanguage: false})\", emptyConsumer())","dfgs":[],"fName":"src_test_java_com_graphaware_nlp_dsl_AnnotateTextProcedureTest.java","fieldParents":[],"isDel":true,"lineBeg":41,"lineEnd":41,"lineMapIndex":-1,"methodParents":[],"nodeIndex":1},{"cfgs":[],"code":"executeInTransaction(\"MATCH (n:Tweet) CALL ga.nlp.annotate({text: n.text, id: id(n), checkLanguage: false}) YIELD result WITH result AS at, n MERGE (n)-[r:ANNOTATED_TEXT]->(at) RETURN n\",(result -> {assertTrue(result.hasNext());assertEquals(10, result.stream().count());}))","dfgs":[],"fName":"src_test_java_com_graphaware_nlp_dsl_AnnotateTextProcedureTest.java","fieldParents":[],"isDel":true,"lineBeg":52,"lineEnd":55,"lineMapIndex":-1,"methodParents":[],"nodeIndex":2},{"cfgs":[],"code":"executeInTransaction(\"CALL ga.nlp.annotate({text: 'The European Union accumulated a higher portion of GDP as a form of foreign aid than any other economic union.', id: 'test-proc'})\", emptyConsumer())","dfgs":[],"fName":"src_test_java_com_graphaware_nlp_dsl_AnnotateTextProcedureTest.java","fieldParents":[],"isDel":true,"lineBeg":66,"lineEnd":66,"lineMapIndex":-1,"methodParents":[],"nodeIndex":3},{"cfgs":[],"code":"executeInTransaction(\"CALL ga.nlp.annotate({text:'John and Adam planned to kill the cat', id: '123', textProcessor:'com.graphaware.nlp.stub.StubTextProcessor'})\", (result -> {assertTrue(result.hasNext());}))","dfgs":[],"fName":"src_test_java_com_graphaware_nlp_dsl_AnnotateTextProcedureTest.java","fieldParents":[],"isDel":true,"lineBeg":75,"lineEnd":77,"lineMapIndex":-1,"methodParents":[],"nodeIndex":4},{"cfgs":[],"code":"executeInTransaction(\"CALL ga.nlp.filter({text: 'This is the operations manual for Neo4j version 3.2, authored by the Neo4j Team.', filter: 'Neo4j'})\",(result -> {assertTrue(result.hasNext());assertTrue((Boolean)result.next().get(\"result\"));}))","dfgs":[],"fName":"src_test_java_com_graphaware_nlp_dsl_AnnotateTextProcedureTest.java","fieldParents":[],"isDel":true,"lineBeg":82,"lineEnd":86,"lineMapIndex":-1,"methodParents":[],"nodeIndex":5},{"cfgs":[],"code":"Result news = getDatabase().execute(\"MERGE (n:News {text: {value}}) WITH n\\n\"+ \"CALL ga.nlp.annotate({text:n.text, id: {id}, checkLanguage:false}) YIELD result\\n\"+ \"MERGE (n)-[:HAS_ANNOTATED_TEXT]->(result)\\n\"+ \"return result\", params)","dfgs":[],"fName":"src_test_java_com_graphaware_nlp_dsl_EnrichTest.java","fieldParents":[],"isDel":true,"lineBeg":49,"lineEnd":52,"lineMapIndex":22,"methodParents":[],"nodeIndex":6},{"cfgs":[],"code":"executeInTransaction(\"CALL ga.nlp.annotate({text: 'hello my name is Frank', id: 'test-proc', checkLanguage: false})\", emptyConsumer())","dfgs":[],"fName":"src_test_java_com_graphaware_nlp_dsl_SentimentProcedureTest.java","fieldParents":[],"isDel":true,"lineBeg":25,"lineEnd":25,"lineMapIndex":23,"methodParents":[],"nodeIndex":7},{"cfgs":[],"code":"executeInTransaction(\"CALL ga.nlp.annotate({text:'John and Adam planned to kill the cat', id: '123', textProcessor:'com.graphaware.nlp.stub.StubTextProcessor'})\", (result -> {assertTrue(result.hasNext());}))","dfgs":[],"fName":"src_test_java_com_graphaware_nlp_dsl_EnrichConceptProcedureTest.java","fieldParents":[],"isDel":true,"lineBeg":27,"lineEnd":29,"lineMapIndex":-1,"methodParents":[],"nodeIndex":8},{"cfgs":[],"code":"executeInTransaction(\"CALL ga.nlp.annotate({text:'John and Adam planned to kill the cat', id: '123', textProcessor:'com.graphaware.nlp.stub.StubTextProcessor'})\", (result -> {assertTrue(result.hasNext());}))","dfgs":[],"fName":"src_test_java_com_graphaware_nlp_dsl_EnrichConceptProcedureTest.java","fieldParents":[],"isDel":true,"lineBeg":39,"lineEnd":41,"lineMapIndex":-1,"methodParents":[],"nodeIndex":9},{"cfgs":[],"code":"executeInTransaction(\"CALL ga.nlp.annotate({text:'John and Adam planned to kill the cat', id: '123', textProcessor:'com.graphaware.nlp.stub.StubTextProcessor'})\", (result -> {assertTrue(result.hasNext());}))","dfgs":[],"fName":"src_test_java_com_graphaware_nlp_dsl_EnrichConceptProcedureTest.java","fieldParents":[],"isDel":true,"lineBeg":62,"lineEnd":64,"lineMapIndex":-1,"methodParents":[],"nodeIndex":10},{"cfgs":[],"code":"executeInTransaction(\"CALL ga.nlp.annotate({text:'John and Adam went to college.', id: '123', textProcessor:'com.graphaware.nlp.stub.StubTextProcessor'})\", (result -> {assertTrue(result.hasNext());}))","dfgs":[],"fName":"src_test_java_com_graphaware_nlp_dsl_EnrichConceptProcedureTest.java","fieldParents":[],"isDel":true,"lineBeg":74,"lineEnd":76,"lineMapIndex":-1,"methodParents":[],"nodeIndex":11},{"cfgs":[],"code":"executeInTransaction(\"CALL ga.nlp.annotate({text: 'I met one agriculturist.', id: '123-fff', checkLanguage: false})\", emptyConsumer())","dfgs":[],"fName":"src_test_java_com_graphaware_nlp_dsl_Word2VecProcedureTest.java","fieldParents":[],"isDel":true,"lineBeg":34,"lineEnd":34,"lineMapIndex":-1,"methodParents":[],"nodeIndex":12},{"cfgs":[],"code":"executeInTransaction(\"CALL ga.nlp.annotate({text: 'I met one astronaut.', id: '123-fff', checkLanguage: false})\", emptyConsumer())","dfgs":[],"fName":"src_test_java_com_graphaware_nlp_dsl_Word2VecProcedureTest.java","fieldParents":[],"isDel":true,"lineBeg":73,"lineEnd":73,"lineMapIndex":-1,"methodParents":[],"nodeIndex":13},{"cfgs":[],"code":"executeInTransaction(\"CALL ga.nlp.annotate({text: 'I met one agriculturist.', id: '123-fff', checkLanguage: false})\", emptyConsumer())","dfgs":[],"fName":"src_test_java_com_graphaware_nlp_dsl_Word2VecProcedureTest.java","fieldParents":[],"isDel":true,"lineBeg":88,"lineEnd":88,"lineMapIndex":-1,"methodParents":[],"nodeIndex":14},{"cfgs":[],"code":"executeInTransaction(\"CALL ga.nlp.annotate({text: 'The Empire State Building is the highest building in New York City.', id: '123-fff', checkLanguage: false})\", emptyConsumer())","dfgs":[],"fName":"src_test_java_com_graphaware_nlp_dsl_Word2VecProcedureTest.java","fieldParents":[],"isDel":true,"lineBeg":124,"lineEnd":124,"lineMapIndex":-1,"methodParents":[],"nodeIndex":15},{"cfgs":[],"code":"executeInTransaction(\"CALL ga.nlp.workflow.processor.create('testProcess', \"+ \"'com.graphaware.nlp.workflow.processor.WorkflowTextProcessor', \"+ \"{\"+ \"textProcessor: 'com.graphaware.nlp.stub.StubTextProcessor', \"+ \"pipeline: 'tokenizer', \"+ \"processingSteps: {tokenize: true, dependency: true}, \"+ \"stopWords: '+,have, use, can, should, from, may, result, all, during, must, when, time, could, require, work, need, provide, nasa, support, perform, include, which, would, other, level, more, make, between, you, do, about, above, after, again, against, am, any, because, been, before, being, below, both, did, do, does, doing, down, each, few, further, had, has, having, he, her, here, hers, herself, him, himself, his, how, i, its, itself, just, me, most, my, myself, nor, now, off, once, only, our, ours, ourselves, out, over, own, same, she, so, some, than, theirs, them, themselves, those, through, too, under, until, up, very, we, were, what, where, while, who, whom, why, you, your, yours, yourself, yourselves, small, big, little, much, more, some, several, also, any, both, rdquo, ldquo, raquo', \"+ \"threadNumber: 20})\",((Result result) -> {assertTrue(result.hasNext());Map<String, Object> next = result.next();Assert.assertEquals(\"testProcess\", (String) next.get(\"name\"));Assert.assertEquals(\"com.graphaware.nlp.workflow.processor.WorkflowTextProcessor\", (String) next.get(\"className\"));}))","dfgs":[],"fName":"src_test_java_com_graphaware_nlp_dsl_workflow_WorkflowProcessorTest.java","fieldParents":[],"isDel":false,"lineBeg":41,"lineEnd":54,"lineMapIndex":0,"methodParents":[],"nodeIndex":16},{"cfgs":[],"code":"executeInTransaction(\"CALL ga.nlp.annotate({pipeline:'tokenizer', text: 'hello my name is Frank', id: 'test-proc', checkLanguage: false})\", emptyConsumer())","dfgs":[],"fName":"src_test_java_com_graphaware_nlp_dsl_AnnotateTextProcedureTest.java","fieldParents":[],"isDel":false,"lineBeg":41,"lineEnd":41,"lineMapIndex":-1,"methodParents":[],"nodeIndex":17},{"cfgs":[],"code":"executeInTransaction(\"MATCH (n:Tweet) CALL ga.nlp.annotate({pipeline:'tokenizer', text: n.text, id: id(n), checkLanguage: false}) YIELD result WITH result AS at, n MERGE (n)-[r:ANNOTATED_TEXT]->(at) RETURN n\",(result -> {assertTrue(result.hasNext());assertEquals(10, result.stream().count());}))","dfgs":[],"fName":"src_test_java_com_graphaware_nlp_dsl_AnnotateTextProcedureTest.java","fieldParents":[],"isDel":false,"lineBeg":52,"lineEnd":55,"lineMapIndex":-1,"methodParents":[],"nodeIndex":18},{"cfgs":[],"code":"executeInTransaction(\"CALL ga.nlp.annotate({pipeline:'tokenizer', text: 'The European Union accumulated a higher portion of GDP as a form of foreign aid than any other economic union.', id: 'test-proc'})\", emptyConsumer())","dfgs":[],"fName":"src_test_java_com_graphaware_nlp_dsl_AnnotateTextProcedureTest.java","fieldParents":[],"isDel":false,"lineBeg":66,"lineEnd":66,"lineMapIndex":-1,"methodParents":[],"nodeIndex":19},{"cfgs":[],"code":"executeInTransaction(\"CALL ga.nlp.annotate({pipeline:'tokenizer', text:'John and Adam planned to kill the cat', id: '123', textProcessor:'com.graphaware.nlp.stub.StubTextProcessor'})\", (result -> {assertTrue(result.hasNext());}))","dfgs":[],"fName":"src_test_java_com_graphaware_nlp_dsl_AnnotateTextProcedureTest.java","fieldParents":[],"isDel":false,"lineBeg":75,"lineEnd":77,"lineMapIndex":-1,"methodParents":[],"nodeIndex":20},{"cfgs":[],"code":"executeInTransaction(\"CALL ga.nlp.filter({pipeline:'tokenizer', text: 'This is the operations manual for Neo4j version 3.2, authored by the Neo4j Team.', filter: 'Neo4j'})\",(result -> {assertTrue(result.hasNext());assertTrue((Boolean)result.next().get(\"result\"));}))","dfgs":[],"fName":"src_test_java_com_graphaware_nlp_dsl_AnnotateTextProcedureTest.java","fieldParents":[],"isDel":false,"lineBeg":82,"lineEnd":86,"lineMapIndex":-1,"methodParents":[],"nodeIndex":21},{"cfgs":[],"code":"Result news = getDatabase().execute(\"MERGE (n:News {text: {value}}) WITH n\\n\"+ \"CALL ga.nlp.annotate({pipeline:'tokenizer', text:n.text, id: {id}, checkLanguage:false}) YIELD result\\n\"+ \"MERGE (n)-[:HAS_ANNOTATED_TEXT]->(result)\\n\"+ \"return result\", params)","dfgs":[],"fName":"src_test_java_com_graphaware_nlp_dsl_EnrichTest.java","fieldParents":[],"isDel":false,"lineBeg":49,"lineEnd":52,"lineMapIndex":6,"methodParents":[],"nodeIndex":22},{"cfgs":[],"code":"executeInTransaction(\"CALL ga.nlp.annotate({pipeline:'tokenizer', text: 'hello my name is Frank', id: 'test-proc', checkLanguage: false})\", emptyConsumer())","dfgs":[],"fName":"src_test_java_com_graphaware_nlp_dsl_SentimentProcedureTest.java","fieldParents":[],"isDel":false,"lineBeg":25,"lineEnd":25,"lineMapIndex":7,"methodParents":[],"nodeIndex":23},{"cfgs":[],"code":"executeInTransaction(\"CALL ga.nlp.annotate({pipeline:'tokenizer', text:'John and Adam planned to kill the cat', id: '123', textProcessor:'com.graphaware.nlp.stub.StubTextProcessor'})\", (result -> {assertTrue(result.hasNext());}))","dfgs":[],"fName":"src_test_java_com_graphaware_nlp_dsl_EnrichConceptProcedureTest.java","fieldParents":[],"isDel":false,"lineBeg":27,"lineEnd":29,"lineMapIndex":-1,"methodParents":[],"nodeIndex":24},{"cfgs":[],"code":"executeInTransaction(\"CALL ga.nlp.annotate({pipeline:'tokenizer', text:'John and Adam planned to kill the cat', id: '123', textProcessor:'com.graphaware.nlp.stub.StubTextProcessor'})\", (result -> {assertTrue(result.hasNext());}))","dfgs":[],"fName":"src_test_java_com_graphaware_nlp_dsl_EnrichConceptProcedureTest.java","fieldParents":[],"isDel":false,"lineBeg":39,"lineEnd":41,"lineMapIndex":-1,"methodParents":[],"nodeIndex":25},{"cfgs":[],"code":"executeInTransaction(\"CALL ga.nlp.annotate({pipeline:'tokenizer', text:'John and Adam planned to kill the cat', id: '123', textProcessor:'com.graphaware.nlp.stub.StubTextProcessor'})\", (result -> {assertTrue(result.hasNext());}))","dfgs":[],"fName":"src_test_java_com_graphaware_nlp_dsl_EnrichConceptProcedureTest.java","fieldParents":[],"isDel":false,"lineBeg":62,"lineEnd":64,"lineMapIndex":-1,"methodParents":[],"nodeIndex":26},{"cfgs":[],"code":"executeInTransaction(\"CALL ga.nlp.annotate({pipeline:'tokenizer', text:'John and Adam went to college.', id: '123', textProcessor:'com.graphaware.nlp.stub.StubTextProcessor'})\", (result -> {assertTrue(result.hasNext());}))","dfgs":[],"fName":"src_test_java_com_graphaware_nlp_dsl_EnrichConceptProcedureTest.java","fieldParents":[],"isDel":false,"lineBeg":74,"lineEnd":76,"lineMapIndex":-1,"methodParents":[],"nodeIndex":27},{"cfgs":[],"code":"executeInTransaction(\"CALL ga.nlp.annotate({pipeline:'tokenizer', text: 'I met one agriculturist.', id: '123-fff', checkLanguage: false})\", emptyConsumer())","dfgs":[],"fName":"src_test_java_com_graphaware_nlp_dsl_Word2VecProcedureTest.java","fieldParents":[],"isDel":false,"lineBeg":34,"lineEnd":34,"lineMapIndex":-1,"methodParents":[],"nodeIndex":28},{"cfgs":[],"code":"executeInTransaction(\"CALL ga.nlp.annotate({pipeline:'tokenizer', text: 'I met one astronaut.', id: '123-fff', checkLanguage: false})\", emptyConsumer())","dfgs":[],"fName":"src_test_java_com_graphaware_nlp_dsl_Word2VecProcedureTest.java","fieldParents":[],"isDel":false,"lineBeg":73,"lineEnd":73,"lineMapIndex":-1,"methodParents":[],"nodeIndex":29},{"cfgs":[],"code":"executeInTransaction(\"CALL ga.nlp.annotate({pipeline:'tokenizer', text: 'I met one agriculturist.', id: '123-fff', checkLanguage: false})\", emptyConsumer())","dfgs":[],"fName":"src_test_java_com_graphaware_nlp_dsl_Word2VecProcedureTest.java","fieldParents":[],"isDel":false,"lineBeg":88,"lineEnd":88,"lineMapIndex":-1,"methodParents":[],"nodeIndex":30},{"cfgs":[],"code":"executeInTransaction(\"CALL ga.nlp.annotate({pipeline:'tokenizer', text: 'The Empire State Building is the highest building in New York City.', id: '123-fff', checkLanguage: false})\", emptyConsumer())","dfgs":[],"fName":"src_test_java_com_graphaware_nlp_dsl_Word2VecProcedureTest.java","fieldParents":[],"isDel":false,"lineBeg":124,"lineEnd":124,"lineMapIndex":-1,"methodParents":[],"nodeIndex":31}]