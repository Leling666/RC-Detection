[
    {
        "cfgs": [],
        "code": "executeInTransaction(\"CALL ga.nlp.workflow.processor.create('testProcess', \"+ \"'com.graphaware.nlp.workflow.processor.WorkflowTextProcessor', \"+ \"{\"+ \"textProcessor: 'com.graphaware.nlp.stub.StubTextProcessor', \"+ \"pipeline: 'customStopWords', \"+ \"processingSteps: {tokenize: true, dependency: true}, \"+ \"stopWords: '+,have, use, can, should, from, may, result, all, during, must, when, time, could, require, work, need, provide, nasa, support, perform, include, which, would, other, level, more, make, between, you, do, about, above, after, again, against, am, any, because, been, before, being, below, both, did, do, does, doing, down, each, few, further, had, has, having, he, her, here, hers, herself, him, himself, his, how, i, its, itself, just, me, most, my, myself, nor, now, off, once, only, our, ours, ourselves, out, over, own, same, she, so, some, than, theirs, them, themselves, those, through, too, under, until, up, very, we, were, what, where, while, who, whom, why, you, your, yours, yourself, yourselves, small, big, little, much, more, some, several, also, any, both, rdquo, ldquo, raquo', \"+ \"threadNumber: 20})\",((Result result) -> {assertTrue(result.hasNext());Map<String, Object> next = result.next();Assert.assertEquals(\"testProcess\", (String) next.get(\"name\"));Assert.assertEquals(\"com.graphaware.nlp.workflow.processor.WorkflowTextProcessor\", (String) next.get(\"className\"));}))",
        "dfgs": [],
        "fName": "src_test_java_com_graphaware_nlp_dsl_workflow_WorkflowProcessorTest.java",
        "fieldParents": [],
        "isDel": true,
        "lineBeg": 41,
        "lineEnd": 54,
        "lineMapIndex": 16,
        "methodParents": [],
        "nodeIndex": 0,
        "rootcause": false,
        "commits": [
            "a1ea8011d37b8eeedc0418ecff427e7899d9508b",
            "54e9162abf39b6fc54740b77be853781eff8cc34",
            "881efb53a02157cb637b9638e244ae1147ae5a4c",
            "a0c3704cf9e6fa921194fe2daf6e12b58e1e29e4"
        ]
    },
    {
        "cfgs": [],
        "code": "executeInTransaction(\"CALL ga.nlp.annotate({text: 'hello my name is Frank', id: 'test-proc', checkLanguage: false})\", emptyConsumer())",
        "dfgs": [],
        "fName": "src_test_java_com_graphaware_nlp_dsl_AnnotateTextProcedureTest.java",
        "fieldParents": [],
        "isDel": true,
        "lineBeg": 41,
        "lineEnd": 41,
        "lineMapIndex": -1,
        "methodParents": [],
        "nodeIndex": 1,
        "rootcause": false,
        "commits": [
            "b63005d477a74b908b3ba1e8cd41d0ba5d0f020b"
        ]
    },
    {
        "cfgs": [],
        "code": "executeInTransaction(\"MATCH (n:Tweet) CALL ga.nlp.annotate({text: n.text, id: id(n), checkLanguage: false}) YIELD result WITH result AS at, n MERGE (n)-[r:ANNOTATED_TEXT]->(at) RETURN n\",(result -> {assertTrue(result.hasNext());assertEquals(10, result.stream().count());}))",
        "dfgs": [],
        "fName": "src_test_java_com_graphaware_nlp_dsl_AnnotateTextProcedureTest.java",
        "fieldParents": [],
        "isDel": true,
        "lineBeg": 52,
        "lineEnd": 55,
        "lineMapIndex": -1,
        "methodParents": [],
        "nodeIndex": 2,
        "rootcause": false,
        "commits": [
            "f423e5d51e6b4b65ab233c025382b679ffebed6b"
        ]
    },
    {
        "cfgs": [],
        "code": "executeInTransaction(\"CALL ga.nlp.annotate({text: 'The European Union accumulated a higher portion of GDP as a form of foreign aid than any other economic union.', id: 'test-proc'})\", emptyConsumer())",
        "dfgs": [],
        "fName": "src_test_java_com_graphaware_nlp_dsl_AnnotateTextProcedureTest.java",
        "fieldParents": [],
        "isDel": true,
        "lineBeg": 66,
        "lineEnd": 66,
        "lineMapIndex": -1,
        "methodParents": [],
        "nodeIndex": 3,
        "rootcause": false,
        "commits": [
            "5ebae02ea2dbf7b15103f75c9e26c27ae15f0484"
        ]
    },
    {
        "cfgs": [],
        "code": "executeInTransaction(\"CALL ga.nlp.annotate({text:'John and Adam planned to kill the cat', id: '123', textProcessor:'com.graphaware.nlp.stub.StubTextProcessor'})\", (result -> {assertTrue(result.hasNext());}))",
        "dfgs": [],
        "fName": "src_test_java_com_graphaware_nlp_dsl_AnnotateTextProcedureTest.java",
        "fieldParents": [],
        "isDel": true,
        "lineBeg": 75,
        "lineEnd": 77,
        "lineMapIndex": -1,
        "methodParents": [],
        "nodeIndex": 4,
        "rootcause": false,
        "commits": [
            "566b0a4d53dcd57463b63b9edd751e67a71ac9a6",
            "9f1e34c4aef2a7f52fe9340d950734ed7c529b0d"
        ]
    },
    {
        "cfgs": [],
        "code": "executeInTransaction(\"CALL ga.nlp.filter({text: 'This is the operations manual for Neo4j version 3.2, authored by the Neo4j Team.', filter: 'Neo4j'})\",(result -> {assertTrue(result.hasNext());assertTrue((Boolean)result.next().get(\"result\"));}))",
        "dfgs": [],
        "fName": "src_test_java_com_graphaware_nlp_dsl_AnnotateTextProcedureTest.java",
        "fieldParents": [],
        "isDel": true,
        "lineBeg": 82,
        "lineEnd": 86,
        "lineMapIndex": -1,
        "methodParents": [],
        "nodeIndex": 5,
        "rootcause": false,
        "commits": [
            "b63005d477a74b908b3ba1e8cd41d0ba5d0f020b"
        ]
    },
    {
        "cfgs": [],
        "code": "Result news = getDatabase().execute(\"MERGE (n:News {text: {value}}) WITH n\\n\"+ \"CALL ga.nlp.annotate({text:n.text, id: {id}, checkLanguage:false}) YIELD result\\n\"+ \"MERGE (n)-[:HAS_ANNOTATED_TEXT]->(result)\\n\"+ \"return result\", params)",
        "dfgs": [],
        "fName": "src_test_java_com_graphaware_nlp_dsl_EnrichTest.java",
        "fieldParents": [],
        "isDel": true,
        "lineBeg": 49,
        "lineEnd": 52,
        "lineMapIndex": 22,
        "methodParents": [],
        "nodeIndex": 6,
        "rootcause": false,
        "commits": [
            "541f120f1c72f1b592dbf87a90c871bc0cd3695b"
        ]
    },
    {
        "cfgs": [],
        "code": "executeInTransaction(\"CALL ga.nlp.annotate({text: 'hello my name is Frank', id: 'test-proc', checkLanguage: false})\", emptyConsumer())",
        "dfgs": [],
        "fName": "src_test_java_com_graphaware_nlp_dsl_SentimentProcedureTest.java",
        "fieldParents": [],
        "isDel": true,
        "lineBeg": 25,
        "lineEnd": 25,
        "lineMapIndex": 23,
        "methodParents": [],
        "nodeIndex": 7,
        "rootcause": false,
        "commits": [
            "e3305e4ee3c05a36647daf721fe0dd8ef4d5822e"
        ]
    },
    {
        "cfgs": [],
        "code": "executeInTransaction(\"CALL ga.nlp.annotate({text:'John and Adam planned to kill the cat', id: '123', textProcessor:'com.graphaware.nlp.stub.StubTextProcessor'})\", (result -> {assertTrue(result.hasNext());}))",
        "dfgs": [],
        "fName": "src_test_java_com_graphaware_nlp_dsl_EnrichConceptProcedureTest.java",
        "fieldParents": [],
        "isDel": true,
        "lineBeg": 27,
        "lineEnd": 29,
        "lineMapIndex": -1,
        "methodParents": [],
        "nodeIndex": 8,
        "rootcause": false,
        "commits": [
            "ad0e79a5c40a82ab094fb319e1c0ad90bd34fac1"
        ]
    },
    {
        "cfgs": [],
        "code": "executeInTransaction(\"CALL ga.nlp.annotate({text:'John and Adam planned to kill the cat', id: '123', textProcessor:'com.graphaware.nlp.stub.StubTextProcessor'})\", (result -> {assertTrue(result.hasNext());}))",
        "dfgs": [],
        "fName": "src_test_java_com_graphaware_nlp_dsl_EnrichConceptProcedureTest.java",
        "fieldParents": [],
        "isDel": true,
        "lineBeg": 39,
        "lineEnd": 41,
        "lineMapIndex": -1,
        "methodParents": [],
        "nodeIndex": 9,
        "rootcause": false,
        "commits": [
            "ad0e79a5c40a82ab094fb319e1c0ad90bd34fac1"
        ]
    },
    {
        "cfgs": [],
        "code": "executeInTransaction(\"CALL ga.nlp.annotate({text:'John and Adam planned to kill the cat', id: '123', textProcessor:'com.graphaware.nlp.stub.StubTextProcessor'})\", (result -> {assertTrue(result.hasNext());}))",
        "dfgs": [],
        "fName": "src_test_java_com_graphaware_nlp_dsl_EnrichConceptProcedureTest.java",
        "fieldParents": [],
        "isDel": true,
        "lineBeg": 62,
        "lineEnd": 64,
        "lineMapIndex": -1,
        "methodParents": [],
        "nodeIndex": 10,
        "rootcause": false,
        "commits": [
            "ad0e79a5c40a82ab094fb319e1c0ad90bd34fac1"
        ]
    },
    {
        "cfgs": [],
        "code": "executeInTransaction(\"CALL ga.nlp.annotate({text:'John and Adam went to college.', id: '123', textProcessor:'com.graphaware.nlp.stub.StubTextProcessor'})\", (result -> {assertTrue(result.hasNext());}))",
        "dfgs": [],
        "fName": "src_test_java_com_graphaware_nlp_dsl_EnrichConceptProcedureTest.java",
        "fieldParents": [],
        "isDel": true,
        "lineBeg": 74,
        "lineEnd": 76,
        "lineMapIndex": -1,
        "methodParents": [],
        "nodeIndex": 11,
        "rootcause": false,
        "commits": [
            "4901b19c681f9a5641dd1296a9a1a278b301c308"
        ]
    },
    {
        "cfgs": [],
        "code": "executeInTransaction(\"CALL ga.nlp.annotate({text: 'I met one agriculturist.', id: '123-fff', checkLanguage: false})\", emptyConsumer())",
        "dfgs": [],
        "fName": "src_test_java_com_graphaware_nlp_dsl_Word2VecProcedureTest.java",
        "fieldParents": [],
        "isDel": true,
        "lineBeg": 34,
        "lineEnd": 34,
        "lineMapIndex": -1,
        "methodParents": [],
        "nodeIndex": 12,
        "rootcause": false,
        "commits": [
            "d8d815e86544be07ae27f444c842bdc2cb2e346b"
        ]
    },
    {
        "cfgs": [],
        "code": "executeInTransaction(\"CALL ga.nlp.annotate({text: 'I met one astronaut.', id: '123-fff', checkLanguage: false})\", emptyConsumer())",
        "dfgs": [],
        "fName": "src_test_java_com_graphaware_nlp_dsl_Word2VecProcedureTest.java",
        "fieldParents": [],
        "isDel": true,
        "lineBeg": 73,
        "lineEnd": 73,
        "lineMapIndex": -1,
        "methodParents": [],
        "nodeIndex": 13,
        "rootcause": false,
        "commits": [
            "045edb229f97a6f5a116c7fefd9cc0361fcc0c98"
        ]
    },
    {
        "cfgs": [],
        "code": "executeInTransaction(\"CALL ga.nlp.annotate({text: 'I met one agriculturist.', id: '123-fff', checkLanguage: false})\", emptyConsumer())",
        "dfgs": [],
        "fName": "src_test_java_com_graphaware_nlp_dsl_Word2VecProcedureTest.java",
        "fieldParents": [],
        "isDel": true,
        "lineBeg": 88,
        "lineEnd": 88,
        "lineMapIndex": -1,
        "methodParents": [],
        "nodeIndex": 14,
        "rootcause": false,
        "commits": [
            "045edb229f97a6f5a116c7fefd9cc0361fcc0c98"
        ]
    },
    {
        "cfgs": [],
        "code": "executeInTransaction(\"CALL ga.nlp.annotate({text: 'The Empire State Building is the highest building in New York City.', id: '123-fff', checkLanguage: false})\", emptyConsumer())",
        "dfgs": [],
        "fName": "src_test_java_com_graphaware_nlp_dsl_Word2VecProcedureTest.java",
        "fieldParents": [],
        "isDel": true,
        "lineBeg": 124,
        "lineEnd": 124,
        "lineMapIndex": -1,
        "methodParents": [],
        "nodeIndex": 15,
        "rootcause": false,
        "commits": [
            "3e78c3e5b30a1a5690acab012a48ac96c7dfddf6"
        ]
    },
    {
        "cfgs": [],
        "code": "executeInTransaction(\"CALL ga.nlp.workflow.processor.create('testProcess', \"+ \"'com.graphaware.nlp.workflow.processor.WorkflowTextProcessor', \"+ \"{\"+ \"textProcessor: 'com.graphaware.nlp.stub.StubTextProcessor', \"+ \"pipeline: 'tokenizer', \"+ \"processingSteps: {tokenize: true, dependency: true}, \"+ \"stopWords: '+,have, use, can, should, from, may, result, all, during, must, when, time, could, require, work, need, provide, nasa, support, perform, include, which, would, other, level, more, make, between, you, do, about, above, after, again, against, am, any, because, been, before, being, below, both, did, do, does, doing, down, each, few, further, had, has, having, he, her, here, hers, herself, him, himself, his, how, i, its, itself, just, me, most, my, myself, nor, now, off, once, only, our, ours, ourselves, out, over, own, same, she, so, some, than, theirs, them, themselves, those, through, too, under, until, up, very, we, were, what, where, while, who, whom, why, you, your, yours, yourself, yourselves, small, big, little, much, more, some, several, also, any, both, rdquo, ldquo, raquo', \"+ \"threadNumber: 20})\",((Result result) -> {assertTrue(result.hasNext());Map<String, Object> next = result.next();Assert.assertEquals(\"testProcess\", (String) next.get(\"name\"));Assert.assertEquals(\"com.graphaware.nlp.workflow.processor.WorkflowTextProcessor\", (String) next.get(\"className\"));}))",
        "dfgs": [],
        "fName": "src_test_java_com_graphaware_nlp_dsl_workflow_WorkflowProcessorTest.java",
        "fieldParents": [],
        "isDel": false,
        "lineBeg": 41,
        "lineEnd": 54,
        "lineMapIndex": 0,
        "methodParents": [],
        "nodeIndex": 16,
        "rootcause": false,
        "commits": []
    },
    {
        "cfgs": [],
        "code": "executeInTransaction(\"CALL ga.nlp.annotate({pipeline:'tokenizer', text: 'hello my name is Frank', id: 'test-proc', checkLanguage: false})\", emptyConsumer())",
        "dfgs": [],
        "fName": "src_test_java_com_graphaware_nlp_dsl_AnnotateTextProcedureTest.java",
        "fieldParents": [],
        "isDel": false,
        "lineBeg": 41,
        "lineEnd": 41,
        "lineMapIndex": -1,
        "methodParents": [],
        "nodeIndex": 17,
        "rootcause": false,
        "commits": []
    },
    {
        "cfgs": [],
        "code": "executeInTransaction(\"MATCH (n:Tweet) CALL ga.nlp.annotate({pipeline:'tokenizer', text: n.text, id: id(n), checkLanguage: false}) YIELD result WITH result AS at, n MERGE (n)-[r:ANNOTATED_TEXT]->(at) RETURN n\",(result -> {assertTrue(result.hasNext());assertEquals(10, result.stream().count());}))",
        "dfgs": [],
        "fName": "src_test_java_com_graphaware_nlp_dsl_AnnotateTextProcedureTest.java",
        "fieldParents": [],
        "isDel": false,
        "lineBeg": 52,
        "lineEnd": 55,
        "lineMapIndex": -1,
        "methodParents": [],
        "nodeIndex": 18,
        "rootcause": false,
        "commits": []
    },
    {
        "cfgs": [],
        "code": "executeInTransaction(\"CALL ga.nlp.annotate({pipeline:'tokenizer', text: 'The European Union accumulated a higher portion of GDP as a form of foreign aid than any other economic union.', id: 'test-proc'})\", emptyConsumer())",
        "dfgs": [],
        "fName": "src_test_java_com_graphaware_nlp_dsl_AnnotateTextProcedureTest.java",
        "fieldParents": [],
        "isDel": false,
        "lineBeg": 66,
        "lineEnd": 66,
        "lineMapIndex": -1,
        "methodParents": [],
        "nodeIndex": 19,
        "rootcause": false,
        "commits": []
    },
    {
        "cfgs": [],
        "code": "executeInTransaction(\"CALL ga.nlp.annotate({pipeline:'tokenizer', text:'John and Adam planned to kill the cat', id: '123', textProcessor:'com.graphaware.nlp.stub.StubTextProcessor'})\", (result -> {assertTrue(result.hasNext());}))",
        "dfgs": [],
        "fName": "src_test_java_com_graphaware_nlp_dsl_AnnotateTextProcedureTest.java",
        "fieldParents": [],
        "isDel": false,
        "lineBeg": 75,
        "lineEnd": 77,
        "lineMapIndex": -1,
        "methodParents": [],
        "nodeIndex": 20,
        "rootcause": false,
        "commits": []
    },
    {
        "cfgs": [],
        "code": "executeInTransaction(\"CALL ga.nlp.filter({pipeline:'tokenizer', text: 'This is the operations manual for Neo4j version 3.2, authored by the Neo4j Team.', filter: 'Neo4j'})\",(result -> {assertTrue(result.hasNext());assertTrue((Boolean)result.next().get(\"result\"));}))",
        "dfgs": [],
        "fName": "src_test_java_com_graphaware_nlp_dsl_AnnotateTextProcedureTest.java",
        "fieldParents": [],
        "isDel": false,
        "lineBeg": 82,
        "lineEnd": 86,
        "lineMapIndex": -1,
        "methodParents": [],
        "nodeIndex": 21,
        "rootcause": false,
        "commits": []
    },
    {
        "cfgs": [],
        "code": "Result news = getDatabase().execute(\"MERGE (n:News {text: {value}}) WITH n\\n\"+ \"CALL ga.nlp.annotate({pipeline:'tokenizer', text:n.text, id: {id}, checkLanguage:false}) YIELD result\\n\"+ \"MERGE (n)-[:HAS_ANNOTATED_TEXT]->(result)\\n\"+ \"return result\", params)",
        "dfgs": [],
        "fName": "src_test_java_com_graphaware_nlp_dsl_EnrichTest.java",
        "fieldParents": [],
        "isDel": false,
        "lineBeg": 49,
        "lineEnd": 52,
        "lineMapIndex": 6,
        "methodParents": [],
        "nodeIndex": 22,
        "rootcause": false,
        "commits": []
    },
    {
        "cfgs": [],
        "code": "executeInTransaction(\"CALL ga.nlp.annotate({pipeline:'tokenizer', text: 'hello my name is Frank', id: 'test-proc', checkLanguage: false})\", emptyConsumer())",
        "dfgs": [],
        "fName": "src_test_java_com_graphaware_nlp_dsl_SentimentProcedureTest.java",
        "fieldParents": [],
        "isDel": false,
        "lineBeg": 25,
        "lineEnd": 25,
        "lineMapIndex": 7,
        "methodParents": [],
        "nodeIndex": 23,
        "rootcause": false,
        "commits": []
    },
    {
        "cfgs": [],
        "code": "executeInTransaction(\"CALL ga.nlp.annotate({pipeline:'tokenizer', text:'John and Adam planned to kill the cat', id: '123', textProcessor:'com.graphaware.nlp.stub.StubTextProcessor'})\", (result -> {assertTrue(result.hasNext());}))",
        "dfgs": [],
        "fName": "src_test_java_com_graphaware_nlp_dsl_EnrichConceptProcedureTest.java",
        "fieldParents": [],
        "isDel": false,
        "lineBeg": 27,
        "lineEnd": 29,
        "lineMapIndex": -1,
        "methodParents": [],
        "nodeIndex": 24,
        "rootcause": false,
        "commits": []
    },
    {
        "cfgs": [],
        "code": "executeInTransaction(\"CALL ga.nlp.annotate({pipeline:'tokenizer', text:'John and Adam planned to kill the cat', id: '123', textProcessor:'com.graphaware.nlp.stub.StubTextProcessor'})\", (result -> {assertTrue(result.hasNext());}))",
        "dfgs": [],
        "fName": "src_test_java_com_graphaware_nlp_dsl_EnrichConceptProcedureTest.java",
        "fieldParents": [],
        "isDel": false,
        "lineBeg": 39,
        "lineEnd": 41,
        "lineMapIndex": -1,
        "methodParents": [],
        "nodeIndex": 25,
        "rootcause": false,
        "commits": []
    },
    {
        "cfgs": [],
        "code": "executeInTransaction(\"CALL ga.nlp.annotate({pipeline:'tokenizer', text:'John and Adam planned to kill the cat', id: '123', textProcessor:'com.graphaware.nlp.stub.StubTextProcessor'})\", (result -> {assertTrue(result.hasNext());}))",
        "dfgs": [],
        "fName": "src_test_java_com_graphaware_nlp_dsl_EnrichConceptProcedureTest.java",
        "fieldParents": [],
        "isDel": false,
        "lineBeg": 62,
        "lineEnd": 64,
        "lineMapIndex": -1,
        "methodParents": [],
        "nodeIndex": 26,
        "rootcause": false,
        "commits": []
    },
    {
        "cfgs": [],
        "code": "executeInTransaction(\"CALL ga.nlp.annotate({pipeline:'tokenizer', text:'John and Adam went to college.', id: '123', textProcessor:'com.graphaware.nlp.stub.StubTextProcessor'})\", (result -> {assertTrue(result.hasNext());}))",
        "dfgs": [],
        "fName": "src_test_java_com_graphaware_nlp_dsl_EnrichConceptProcedureTest.java",
        "fieldParents": [],
        "isDel": false,
        "lineBeg": 74,
        "lineEnd": 76,
        "lineMapIndex": -1,
        "methodParents": [],
        "nodeIndex": 27,
        "rootcause": false,
        "commits": []
    },
    {
        "cfgs": [],
        "code": "executeInTransaction(\"CALL ga.nlp.annotate({pipeline:'tokenizer', text: 'I met one agriculturist.', id: '123-fff', checkLanguage: false})\", emptyConsumer())",
        "dfgs": [],
        "fName": "src_test_java_com_graphaware_nlp_dsl_Word2VecProcedureTest.java",
        "fieldParents": [],
        "isDel": false,
        "lineBeg": 34,
        "lineEnd": 34,
        "lineMapIndex": -1,
        "methodParents": [],
        "nodeIndex": 28,
        "rootcause": false,
        "commits": []
    },
    {
        "cfgs": [],
        "code": "executeInTransaction(\"CALL ga.nlp.annotate({pipeline:'tokenizer', text: 'I met one astronaut.', id: '123-fff', checkLanguage: false})\", emptyConsumer())",
        "dfgs": [],
        "fName": "src_test_java_com_graphaware_nlp_dsl_Word2VecProcedureTest.java",
        "fieldParents": [],
        "isDel": false,
        "lineBeg": 73,
        "lineEnd": 73,
        "lineMapIndex": -1,
        "methodParents": [],
        "nodeIndex": 29,
        "rootcause": false,
        "commits": []
    },
    {
        "cfgs": [],
        "code": "executeInTransaction(\"CALL ga.nlp.annotate({pipeline:'tokenizer', text: 'I met one agriculturist.', id: '123-fff', checkLanguage: false})\", emptyConsumer())",
        "dfgs": [],
        "fName": "src_test_java_com_graphaware_nlp_dsl_Word2VecProcedureTest.java",
        "fieldParents": [],
        "isDel": false,
        "lineBeg": 88,
        "lineEnd": 88,
        "lineMapIndex": -1,
        "methodParents": [],
        "nodeIndex": 30,
        "rootcause": false,
        "commits": []
    },
    {
        "cfgs": [],
        "code": "executeInTransaction(\"CALL ga.nlp.annotate({pipeline:'tokenizer', text: 'The Empire State Building is the highest building in New York City.', id: '123-fff', checkLanguage: false})\", emptyConsumer())",
        "dfgs": [],
        "fName": "src_test_java_com_graphaware_nlp_dsl_Word2VecProcedureTest.java",
        "fieldParents": [],
        "isDel": false,
        "lineBeg": 124,
        "lineEnd": 124,
        "lineMapIndex": -1,
        "methodParents": [],
        "nodeIndex": 31,
        "rootcause": false,
        "commits": []
    }
]