[{"cfgs":[1],"code":"final double c = divisor.getReal()","dfgs":[1,2],"fName":"src_main_java_org_apache_commons_math_complex_Complex.java","fieldParents":[],"isDel":true,"lineBeg":252,"lineEnd":252,"lineMapIndex":12,"methodParents":[],"nodeIndex":0},{"cfgs":[2],"code":"final double d = divisor.getImaginary()","dfgs":[2],"fName":"src_main_java_org_apache_commons_math_complex_Complex.java","fieldParents":[],"isDel":true,"lineBeg":253,"lineEnd":253,"lineMapIndex":13,"methodParents":[],"nodeIndex":1},{"cfgs":[3],"code":"if (c == 0.0 && d == 0.0)","dfgs":[],"fName":"src_main_java_org_apache_commons_math_complex_Complex.java","fieldParents":[],"isDel":true,"lineBeg":254,"lineEnd":254,"lineMapIndex":-1,"methodParents":[],"nodeIndex":2},{"cfgs":[],"code":"return NaN","dfgs":[],"fName":"src_main_java_org_apache_commons_math_complex_Complex.java","fieldParents":[],"isDel":true,"lineBeg":255,"lineEnd":255,"lineMapIndex":-1,"methodParents":[],"nodeIndex":3},{"cfgs":[],"code":"return NaN","dfgs":[],"fName":"src_main_java_org_apache_commons_math_complex_Complex.java","fieldParents":[],"isDel":true,"lineBeg":288,"lineEnd":288,"lineMapIndex":14,"methodParents":[],"nodeIndex":4},{"cfgs":[6],"code":"Complex x = new Complex(1,1)","dfgs":[],"fName":"src_test_java_org_apache_commons_math_complex_ComplexTest.java","fieldParents":[],"isDel":true,"lineBeg":352,"lineEnd":352,"lineMapIndex":19,"methodParents":[],"nodeIndex":5},{"cfgs":[],"code":"yComplex = new Complex(yDouble)","dfgs":[],"fName":"src_test_java_org_apache_commons_math_complex_ComplexTest.java","fieldParents":[],"isDel":true,"lineBeg":358,"lineEnd":358,"lineMapIndex":20,"methodParents":[],"nodeIndex":6},{"cfgs":[],"code":"Assert.assertTrue(Complex.I.atan().isNaN())","dfgs":[],"fName":"src_test_java_org_apache_commons_math_complex_ComplexTest.java","fieldParents":[],"isDel":true,"lineBeg":570,"lineEnd":570,"lineMapIndex":24,"methodParents":[],"nodeIndex":7},{"cfgs":[],"code":"private final transient boolean isZero","dfgs":[],"fName":"src_main_java_org_apache_commons_math_complex_Complex.java","fieldParents":[],"isDel":false,"lineBeg":82,"lineEnd":82,"lineMapIndex":-1,"methodParents":[],"nodeIndex":8},{"cfgs":[],"code":"isZero = real == 0 && imaginary == 0","dfgs":[],"fName":"src_main_java_org_apache_commons_math_complex_Complex.java","fieldParents":[8],"isDel":false,"lineBeg":106,"lineEnd":106,"lineMapIndex":-1,"methodParents":[],"nodeIndex":9},{"cfgs":[11,12],"code":"if (divisor.isZero)","dfgs":[],"fName":"src_main_java_org_apache_commons_math_complex_Complex.java","fieldParents":[8],"isDel":false,"lineBeg":258,"lineEnd":258,"lineMapIndex":-1,"methodParents":[],"nodeIndex":10},{"cfgs":[],"code":"return isZero ? NaN : INF","dfgs":[],"fName":"src_main_java_org_apache_commons_math_complex_Complex.java","fieldParents":[8],"isDel":false,"lineBeg":259,"lineEnd":259,"lineMapIndex":-1,"methodParents":[],"nodeIndex":11},{"cfgs":[13],"code":"final double c = divisor.getReal()","dfgs":[13],"fName":"src_main_java_org_apache_commons_math_complex_Complex.java","fieldParents":[],"isDel":false,"lineBeg":266,"lineEnd":266,"lineMapIndex":0,"methodParents":[],"nodeIndex":12},{"cfgs":[],"code":"final double d = divisor.getImaginary()","dfgs":[],"fName":"src_main_java_org_apache_commons_math_complex_Complex.java","fieldParents":[],"isDel":false,"lineBeg":267,"lineEnd":267,"lineMapIndex":1,"methodParents":[],"nodeIndex":13},{"cfgs":[],"code":"return isZero ? NaN : INF","dfgs":[],"fName":"src_main_java_org_apache_commons_math_complex_Complex.java","fieldParents":[8],"isDel":false,"lineBeg":295,"lineEnd":295,"lineMapIndex":4,"methodParents":[],"nodeIndex":14},{"cfgs":[],"code":"Assert.assertEquals(z, Complex.INF)","dfgs":[],"fName":"src_test_java_org_apache_commons_math_complex_ComplexTest.java","fieldParents":[],"isDel":false,"lineBeg":232,"lineEnd":232,"lineMapIndex":-1,"methodParents":[],"nodeIndex":15},{"cfgs":[],"code":"public void testDivideZeroZero() ","dfgs":[],"fName":"src_test_java_org_apache_commons_math_complex_ComplexTest.java","fieldParents":[],"isDel":false,"lineBeg":236,"lineEnd":236,"lineMapIndex":-1,"methodParents":[],"nodeIndex":16},{"cfgs":[18],"code":"Complex x = new Complex(0.0, 0.0)","dfgs":[18],"fName":"src_test_java_org_apache_commons_math_complex_ComplexTest.java","fieldParents":[],"isDel":false,"lineBeg":237,"lineEnd":237,"lineMapIndex":-1,"methodParents":[9],"nodeIndex":17},{"cfgs":[],"code":"Complex z = x.divide(Complex.ZERO)","dfgs":[],"fName":"src_test_java_org_apache_commons_math_complex_ComplexTest.java","fieldParents":[],"isDel":false,"lineBeg":238,"lineEnd":238,"lineMapIndex":-1,"methodParents":[10],"nodeIndex":18},{"cfgs":[20],"code":"Complex x = new Complex(1, 1)","dfgs":[],"fName":"src_test_java_org_apache_commons_math_complex_ComplexTest.java","fieldParents":[],"isDel":false,"lineBeg":359,"lineEnd":359,"lineMapIndex":5,"methodParents":[9],"nodeIndex":19},{"cfgs":[],"code":"yComplex = new Complex(yDouble)","dfgs":[],"fName":"src_test_java_org_apache_commons_math_complex_ComplexTest.java","fieldParents":[],"isDel":false,"lineBeg":365,"lineEnd":365,"lineMapIndex":6,"methodParents":[],"nodeIndex":20},{"cfgs":[],"code":"public void testAtanI() ","dfgs":[],"fName":"src_test_java_org_apache_commons_math_complex_ComplexTest.java","fieldParents":[],"isDel":false,"lineBeg":575,"lineEnd":575,"lineMapIndex":-1,"methodParents":[],"nodeIndex":21},{"cfgs":[23,24],"code":"for (int i = -10; i < 10; i++)","dfgs":[23],"fName":"src_test_java_org_apache_commons_math_complex_ComplexTest.java","fieldParents":[],"isDel":false,"lineBeg":576,"lineEnd":576,"lineMapIndex":-1,"methodParents":[],"nodeIndex":22},{"cfgs":[],"code":"System.out.println(new Complex(0, 1 - 0.1 * i).atan())","dfgs":[],"fName":"src_test_java_org_apache_commons_math_complex_ComplexTest.java","fieldParents":[],"isDel":false,"lineBeg":577,"lineEnd":577,"lineMapIndex":-1,"methodParents":[9],"nodeIndex":23},{"cfgs":[],"code":"Assert.assertTrue(Complex.I.atan().isInfinite())","dfgs":[],"fName":"src_test_java_org_apache_commons_math_complex_ComplexTest.java","fieldParents":[],"isDel":false,"lineBeg":579,"lineEnd":579,"lineMapIndex":7,"methodParents":[],"nodeIndex":24}]