[{"cfgs": [], "code": "runServer(null, null, confDir, new KMSCallable<Void>() {@Overridepublic Void call() throws Exception {final Configuration clientConf = new Configuration();final URI uri = createKMSUri(getKMSUrl());clientConf.set(KeyProviderFactory.KEY_PROVIDER_PATH,createKMSUri(getKMSUrl()).toString());doAs(\"client\", new PrivilegedExceptionAction<Void>() {@Overridepublic Void run() throws Exception {KeyProvider kp = createProvider(uri, clientConf);// test delegation token retrievalKeyProviderDelegationTokenExtension kpdte =KeyProviderDelegationTokenExtension.createKeyProviderDelegationTokenExtension(kp);final Credentials credentials = new Credentials();final Token<?>[] tokens =kpdte.addDelegationTokens(\"client1\", credentials);Assert.assertEquals(1, credentials.getAllTokens().size());InetSocketAddress kmsAddr =new InetSocketAddress(getKMSUrl().getHost(),getKMSUrl().getPort());Assert.assertEquals(KMSDelegationToken.TOKEN_KIND,credentials.getToken(SecurityUtil.buildTokenService(kmsAddr)).getKind());// Test non-renewer user cannot renew.for (Token<?> token : tokens) {if (!(token.getKind().equals(KMSDelegationToken.TOKEN_KIND))) {LOG.info(\"Skipping token {}\", token);continue;}LOG.info(\"Got dt for \" + uri + \"; \" + token);try {token.renew(clientConf);Assert.fail(\"client should not be allowed to renew token with\"+ \"renewer=client1\");} catch (Exception e) {GenericTestUtils.assertExceptionContains(\"tries to renew a token with renewer\", e);}}final UserGroupInformation otherUgi;if (useKrb) {UserGroupInformation.loginUserFromKeytab(\"client1\", keytab.getAbsolutePath());otherUgi = UserGroupInformation.getLoginUser();} else {otherUgi = UserGroupInformation.createUserForTesting(\"client1\",new String[] {\"other group\"});UserGroupInformation.setLoginUser(otherUgi);}try {// test delegation token renewal via renewerotherUgi.doAs(new PrivilegedExceptionAction<Void>() {@Overridepublic Void run() throws Exception {boolean renewed = false;for (Token<?> token : tokens) {if (!(token.getKind().equals(KMSDelegationToken.TOKEN_KIND))) {LOG.info(\"Skipping token {}\", token);continue;}LOG.info(\"Got dt for \" + uri + \"; \" + token);long tokenLife = token.renew(clientConf);LOG.info(\"Renewed token of kind {}, new lifetime:{}\",token.getKind(), tokenLife);Thread.sleep(100);long newTokenLife = token.renew(clientConf);LOG.info(\"Renewed token of kind {}, new lifetime:{}\",token.getKind(), newTokenLife);Assert.assertTrue(newTokenLife > tokenLife);renewed = true;}Assert.assertTrue(renewed);// test delegation token cancellationfor (Token<?> token : tokens) {if (!(token.getKind().equals(KMSDelegationToken.TOKEN_KIND))) {LOG.info(\"Skipping token {}\", token);continue;}LOG.info(\"Got dt for \" + uri + \"; \" + token);token.cancel(clientConf);LOG.info(\"Cancelled token of kind {}\", token.getKind());try {token.renew(clientConf);Assert.fail(\"should not be able to renew a canceled token\");} catch (Exception e) {LOG.info(\"Expected exception when renewing token\", e);}}return null;}});return null;} finally {otherUgi.logoutUserFromKeytab();}}});return null;}})", "dfgs": [], "fName": "hadoop-common-project_hadoop-kms_src_test_java_org_apache_hadoop_crypto_key_kms_server_TestKMS.java", "fieldParents": [], "isDel": true, "lineBeg": 1785, "lineEnd": 1893, "lineMapIndex": 1, "methodParents": [], "nodeIndex": 0, "rootcause": false, "commits": ["d0a347984da175948b553a675dc357491df2fd0f", "713cb71820ad94a5436f35824d07aa12fcba5cc6", "7154a20bcb1559c23aeb3b78b920bed03d834cb5", "771f798edf97b27ae003395118c0317b484df6ee", "8ebf2e95d2053cb94c6ff87ca018811fe8276f2b"]}, {"cfgs": [], "code": "final DelegationTokenIdentifier identifier =(DelegationTokenIdentifier) token.decodeIdentifier()", "dfgs": [], "fName": "hadoop-common-project_hadoop-kms_src_test_java_org_apache_hadoop_crypto_key_kms_server_TestKMS.java", "fieldParents": [], "isDel": false, "lineBeg": 1824, "lineEnd": 1825, "lineMapIndex": 0, "methodParents": [], "nodeIndex": 1, "rootcause": false, "commits": []}, {"cfgs": [], "code": "GenericTestUtils.assertExceptionContains(\"tries to renew a token (\" + identifier+ \") with non-matching renewer\", e)", "dfgs": [], "fName": "hadoop-common-project_hadoop-kms_src_test_java_org_apache_hadoop_crypto_key_kms_server_TestKMS.java", "fieldParents": [], "isDel": false, "lineBeg": 1826, "lineEnd": 1828, "lineMapIndex": -1, "methodParents": [], "nodeIndex": 2, "rootcause": false, "commits": []}]