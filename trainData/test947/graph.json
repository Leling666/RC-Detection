[{"cfgs":[],"code":"return decimalBetween(min,max).intValue()","dfgs":[],"fName":"src_main_java_com_github_javafaker_Number.java","fieldParents":[],"isDel":true,"lineBeg":30,"lineEnd":30,"lineMapIndex":14,"methodParents":[],"nodeIndex":0},{"cfgs":[],"code":"import java.util.ArrayList","dfgs":[],"fName":"src_test_java_com_github_javafaker_NumberTest.java","fieldParents":[],"isDel":false,"lineBeg":12,"lineEnd":12,"lineMapIndex":-1,"methodParents":[],"nodeIndex":1},{"cfgs":[],"code":"import java.util.Arrays","dfgs":[],"fName":"src_test_java_com_github_javafaker_NumberTest.java","fieldParents":[],"isDel":false,"lineBeg":13,"lineEnd":13,"lineMapIndex":-1,"methodParents":[],"nodeIndex":2},{"cfgs":[],"code":"import java.util.HashSet","dfgs":[],"fName":"src_test_java_com_github_javafaker_NumberTest.java","fieldParents":[],"isDel":false,"lineBeg":14,"lineEnd":14,"lineMapIndex":-1,"methodParents":[],"nodeIndex":3},{"cfgs":[],"code":"public void testNumberBetweenOneAndThree() ","dfgs":[],"fName":"src_test_java_com_github_javafaker_NumberTest.java","fieldParents":[],"isDel":false,"lineBeg":127,"lineEnd":127,"lineMapIndex":-1,"methodParents":[],"nodeIndex":4},{"cfgs":[6],"code":"Set<Integer> nums = Sets.newHashSet()","dfgs":[13,12],"fName":"src_test_java_com_github_javafaker_NumberTest.java","fieldParents":[],"isDel":false,"lineBeg":128,"lineEnd":128,"lineMapIndex":-1,"methodParents":[],"nodeIndex":5},{"cfgs":[7],"code":"final int lowerLimit = 0","dfgs":[9],"fName":"src_test_java_com_github_javafaker_NumberTest.java","fieldParents":[],"isDel":false,"lineBeg":129,"lineEnd":129,"lineMapIndex":-1,"methodParents":[],"nodeIndex":6},{"cfgs":[8],"code":"final int upperLimit = 3","dfgs":[9],"fName":"src_test_java_com_github_javafaker_NumberTest.java","fieldParents":[],"isDel":false,"lineBeg":130,"lineEnd":130,"lineMapIndex":-1,"methodParents":[],"nodeIndex":7},{"cfgs":[9,13],"code":"for (int i = 0; i < 1000; ++i)","dfgs":[],"fName":"src_test_java_com_github_javafaker_NumberTest.java","fieldParents":[],"isDel":false,"lineBeg":131,"lineEnd":131,"lineMapIndex":-1,"methodParents":[],"nodeIndex":8},{"cfgs":[10],"code":"int value = faker.number().numberBetween(lowerLimit, upperLimit)","dfgs":[10,11],"fName":"src_test_java_com_github_javafaker_NumberTest.java","fieldParents":[],"isDel":false,"lineBeg":132,"lineEnd":132,"lineMapIndex":-1,"methodParents":[14],"nodeIndex":9},{"cfgs":[11],"code":"assertThat(value, is(lessThan(upperLimit)))","dfgs":[11],"fName":"src_test_java_com_github_javafaker_NumberTest.java","fieldParents":[],"isDel":false,"lineBeg":133,"lineEnd":133,"lineMapIndex":-1,"methodParents":[],"nodeIndex":10},{"cfgs":[12],"code":"assertThat(value, is(greaterThanOrEqualTo(lowerLimit)))","dfgs":[13,12],"fName":"src_test_java_com_github_javafaker_NumberTest.java","fieldParents":[],"isDel":false,"lineBeg":134,"lineEnd":134,"lineMapIndex":-1,"methodParents":[],"nodeIndex":11},{"cfgs":[],"code":"nums.add(value)","dfgs":[13],"fName":"src_test_java_com_github_javafaker_NumberTest.java","fieldParents":[],"isDel":false,"lineBeg":135,"lineEnd":135,"lineMapIndex":-1,"methodParents":[],"nodeIndex":12},{"cfgs":[],"code":"assertThat(\"Verify all numbers 0-3 were represented\", nums,hasSize(3))","dfgs":[],"fName":"src_test_java_com_github_javafaker_NumberTest.java","fieldParents":[],"isDel":false,"lineBeg":137,"lineEnd":137,"lineMapIndex":-1,"methodParents":[],"nodeIndex":13},{"cfgs":[],"code":"return decimalBetween(min,max).setScale(0, BigDecimal.ROUND_HALF_DOWN).intValue()","dfgs":[],"fName":"src_main_java_com_github_javafaker_Number.java","fieldParents":[],"isDel":false,"lineBeg":30,"lineEnd":30,"lineMapIndex":0,"methodParents":[],"nodeIndex":14}]